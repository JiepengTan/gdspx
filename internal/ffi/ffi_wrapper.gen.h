#ifndef CGO_GODOT_GO_GDEXTENSION_WRAPPER_H
#define CGO_GODOT_GO_GDEXTENSION_WRAPPER_H


/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.c.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.h.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
#include "gdextension_spx_codegen_header.h"

/* Go cannot call C function pointers directly, so we must generate C wrapper code to call the functions. */void cgo_callfn_GDExtensionSpxAudioPlayAudio(const GDExtensionSpxAudioPlayAudio fn, GdString path) {
	fn(path);
}
void cgo_callfn_GDExtensionSpxAudioSetAudioVolume(const GDExtensionSpxAudioSetAudioVolume fn, GdFloat volume) {
	fn(volume);
}
void cgo_callfn_GDExtensionSpxAudioGetAudioVolume(const GDExtensionSpxAudioGetAudioVolume fn, GdFloat* ret_val) {
	fn(ret_val);
}
void cgo_callfn_GDExtensionSpxAudioIsMusicPlaying(const GDExtensionSpxAudioIsMusicPlaying fn, GdBool* ret_val) {
	fn(ret_val);
}
void cgo_callfn_GDExtensionSpxAudioPlayMusic(const GDExtensionSpxAudioPlayMusic fn, GdString path) {
	fn(path);
}
void cgo_callfn_GDExtensionSpxAudioSetMusicVolume(const GDExtensionSpxAudioSetMusicVolume fn, GdFloat volume) {
	fn(volume);
}
void cgo_callfn_GDExtensionSpxAudioGetMusicVolume(const GDExtensionSpxAudioGetMusicVolume fn, GdFloat* ret_val) {
	fn(ret_val);
}
void cgo_callfn_GDExtensionSpxAudioPauseMusic(const GDExtensionSpxAudioPauseMusic fn) {
	fn();
}
void cgo_callfn_GDExtensionSpxAudioResumeMusic(const GDExtensionSpxAudioResumeMusic fn) {
	fn();
}
void cgo_callfn_GDExtensionSpxAudioGetMusicTimer(const GDExtensionSpxAudioGetMusicTimer fn, GdFloat* ret_val) {
	fn(ret_val);
}
void cgo_callfn_GDExtensionSpxAudioSetMusicTimer(const GDExtensionSpxAudioSetMusicTimer fn, GdFloat time) {
	fn(time);
}
void cgo_callfn_GDExtensionSpxInputGetMousePos(const GDExtensionSpxInputGetMousePos fn, GdVec2* ret_val) {
	fn(ret_val);
}
void cgo_callfn_GDExtensionSpxInputGetMouseState(const GDExtensionSpxInputGetMouseState fn, GdInt mouse_id, GdBool* ret_val) {
	fn(mouse_id,ret_val);
}
void cgo_callfn_GDExtensionSpxInputGetKeyState(const GDExtensionSpxInputGetKeyState fn, GdInt key, GdInt* ret_val) {
	fn(key,ret_val);
}
void cgo_callfn_GDExtensionSpxInputGetAxis(const GDExtensionSpxInputGetAxis fn, GdString axis, GdFloat* ret_val) {
	fn(axis,ret_val);
}
void cgo_callfn_GDExtensionSpxInputIsActionPressed(const GDExtensionSpxInputIsActionPressed fn, GdString action, GdBool* ret_val) {
	fn(action,ret_val);
}
void cgo_callfn_GDExtensionSpxInputIsActionJustPressed(const GDExtensionSpxInputIsActionJustPressed fn, GdString action, GdBool* ret_val) {
	fn(action,ret_val);
}
void cgo_callfn_GDExtensionSpxInputIsActionJustReleased(const GDExtensionSpxInputIsActionJustReleased fn, GdString action, GdBool* ret_val) {
	fn(action,ret_val);
}
void cgo_callfn_GDExtensionSpxPhysicRaycast(const GDExtensionSpxPhysicRaycast fn, GdVec2 from, GdVec2 to, GdInt collision_mask, GdObj* ret_val) {
	fn(from, to, collision_mask,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteCreateSprite(const GDExtensionSpxSpriteCreateSprite fn, GdString path, GdObj* ret_val) {
	fn(path,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteCloneSprite(const GDExtensionSpxSpriteCloneSprite fn, GdObj obj, GdObj* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteDestroySprite(const GDExtensionSpxSpriteDestroySprite fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteIsSpriteAlive(const GDExtensionSpxSpriteIsSpriteAlive fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetPosition(const GDExtensionSpxSpriteSetPosition fn, GdObj obj, GdVec2 pos) {
	fn(obj, pos);
}
void cgo_callfn_GDExtensionSpxSpriteSetRotation(const GDExtensionSpxSpriteSetRotation fn, GdObj obj, GdFloat rot) {
	fn(obj, rot);
}
void cgo_callfn_GDExtensionSpxSpriteSetScale(const GDExtensionSpxSpriteSetScale fn, GdObj obj, GdVec2 scale) {
	fn(obj, scale);
}
void cgo_callfn_GDExtensionSpxSpriteGetPosition(const GDExtensionSpxSpriteGetPosition fn, GdObj obj, GdVec2* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteGetRotation(const GDExtensionSpxSpriteGetRotation fn, GdObj obj, GdFloat* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteGetScale(const GDExtensionSpxSpriteGetScale fn, GdObj obj, GdVec2* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetColor(const GDExtensionSpxSpriteSetColor fn, GdObj obj, GdColor color) {
	fn(obj, color);
}
void cgo_callfn_GDExtensionSpxSpriteGetColor(const GDExtensionSpxSpriteGetColor fn, GdObj obj, GdColor* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetTexture(const GDExtensionSpxSpriteSetTexture fn, GdObj obj, GdString path) {
	fn(obj, path);
}
void cgo_callfn_GDExtensionSpxSpriteGetTexture(const GDExtensionSpxSpriteGetTexture fn, GdObj obj, GdString* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetVisible(const GDExtensionSpxSpriteSetVisible fn, GdObj obj, GdBool visible) {
	fn(obj, visible);
}
void cgo_callfn_GDExtensionSpxSpriteGetVisible(const GDExtensionSpxSpriteGetVisible fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteGetZIndex(const GDExtensionSpxSpriteGetZIndex fn, GdObj obj, GdInt* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetZIndex(const GDExtensionSpxSpriteSetZIndex fn, GdObj obj, GdInt z) {
	fn(obj, z);
}
void cgo_callfn_GDExtensionSpxSpritePlayAnim(const GDExtensionSpxSpritePlayAnim fn, GdObj obj, GdString p_name, GdFloat p_custom_scale, GdBool p_from_end) {
	fn(obj, p_name, p_custom_scale, p_from_end);
}
void cgo_callfn_GDExtensionSpxSpritePlayBackwardsAnim(const GDExtensionSpxSpritePlayBackwardsAnim fn, GdObj obj, GdString p_name) {
	fn(obj, p_name);
}
void cgo_callfn_GDExtensionSpxSpritePauseAnim(const GDExtensionSpxSpritePauseAnim fn, GdObj obj) {
	fn(obj);
}
void cgo_callfn_GDExtensionSpxSpriteStopAnim(const GDExtensionSpxSpriteStopAnim fn, GdObj obj) {
	fn(obj);
}
void cgo_callfn_GDExtensionSpxSpriteIsPlayingAnim(const GDExtensionSpxSpriteIsPlayingAnim fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetAnim(const GDExtensionSpxSpriteSetAnim fn, GdObj obj, GdString p_name) {
	fn(obj, p_name);
}
void cgo_callfn_GDExtensionSpxSpriteGetAnim(const GDExtensionSpxSpriteGetAnim fn, GdObj obj, GdString* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetAnimFrame(const GDExtensionSpxSpriteSetAnimFrame fn, GdObj obj, GdInt p_frame) {
	fn(obj, p_frame);
}
void cgo_callfn_GDExtensionSpxSpriteGetAnimFrame(const GDExtensionSpxSpriteGetAnimFrame fn, GdObj obj, GdInt* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetAnimSpeedScale(const GDExtensionSpxSpriteSetAnimSpeedScale fn, GdObj obj, GdFloat p_speed_scale) {
	fn(obj, p_speed_scale);
}
void cgo_callfn_GDExtensionSpxSpriteGetAnimSpeedScale(const GDExtensionSpxSpriteGetAnimSpeedScale fn, GdObj obj, GdFloat* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteGetAnimPlayingSpeed(const GDExtensionSpxSpriteGetAnimPlayingSpeed fn, GdObj obj, GdFloat* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetAnimCentered(const GDExtensionSpxSpriteSetAnimCentered fn, GdObj obj, GdBool p_center) {
	fn(obj, p_center);
}
void cgo_callfn_GDExtensionSpxSpriteIsAnimCentered(const GDExtensionSpxSpriteIsAnimCentered fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetAnimOffset(const GDExtensionSpxSpriteSetAnimOffset fn, GdObj obj, GdVec2 p_offset) {
	fn(obj, p_offset);
}
void cgo_callfn_GDExtensionSpxSpriteGetAnimOffset(const GDExtensionSpxSpriteGetAnimOffset fn, GdObj obj, GdVec2* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetAnimFlipH(const GDExtensionSpxSpriteSetAnimFlipH fn, GdObj obj, GdBool p_flip) {
	fn(obj, p_flip);
}
void cgo_callfn_GDExtensionSpxSpriteIsAnimFlippedH(const GDExtensionSpxSpriteIsAnimFlippedH fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetAnimFlipV(const GDExtensionSpxSpriteSetAnimFlipV fn, GdObj obj, GdBool p_flip) {
	fn(obj, p_flip);
}
void cgo_callfn_GDExtensionSpxSpriteIsAnimFlippedV(const GDExtensionSpxSpriteIsAnimFlippedV fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetGravity(const GDExtensionSpxSpriteSetGravity fn, GdObj obj, GdFloat gravity) {
	fn(obj, gravity);
}
void cgo_callfn_GDExtensionSpxSpriteGetGravity(const GDExtensionSpxSpriteGetGravity fn, GdObj obj, GdFloat* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetMass(const GDExtensionSpxSpriteSetMass fn, GdObj obj, GdFloat mass) {
	fn(obj, mass);
}
void cgo_callfn_GDExtensionSpxSpriteGetMass(const GDExtensionSpxSpriteGetMass fn, GdObj obj, GdFloat* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteAddForce(const GDExtensionSpxSpriteAddForce fn, GdObj obj, GdVec2 force) {
	fn(obj, force);
}
void cgo_callfn_GDExtensionSpxSpriteAddImpulse(const GDExtensionSpxSpriteAddImpulse fn, GdObj obj, GdVec2 impulse) {
	fn(obj, impulse);
}
void cgo_callfn_GDExtensionSpxSpriteSetCollisionLayer(const GDExtensionSpxSpriteSetCollisionLayer fn, GdObj obj, GdInt layer) {
	fn(obj, layer);
}
void cgo_callfn_GDExtensionSpxSpriteGetCollisionLayer(const GDExtensionSpxSpriteGetCollisionLayer fn, GdObj obj, GdInt* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetCollisionMask(const GDExtensionSpxSpriteSetCollisionMask fn, GdObj obj, GdInt mask) {
	fn(obj, mask);
}
void cgo_callfn_GDExtensionSpxSpriteGetCollisionMask(const GDExtensionSpxSpriteGetCollisionMask fn, GdObj obj, GdInt* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetTriggerLayer(const GDExtensionSpxSpriteSetTriggerLayer fn, GdObj obj, GdInt layer) {
	fn(obj, layer);
}
void cgo_callfn_GDExtensionSpxSpriteGetTriggerLayer(const GDExtensionSpxSpriteGetTriggerLayer fn, GdObj obj, GdInt* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetTriggerMask(const GDExtensionSpxSpriteSetTriggerMask fn, GdObj obj, GdInt mask) {
	fn(obj, mask);
}
void cgo_callfn_GDExtensionSpxSpriteGetTriggerMask(const GDExtensionSpxSpriteGetTriggerMask fn, GdObj obj, GdInt* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetColliderRect(const GDExtensionSpxSpriteSetColliderRect fn, GdObj obj, GdVec2 center, GdVec2 size) {
	fn(obj, center, size);
}
void cgo_callfn_GDExtensionSpxSpriteSetColliderCircle(const GDExtensionSpxSpriteSetColliderCircle fn, GdObj obj, GdVec2 center, GdFloat radius) {
	fn(obj, center, radius);
}
void cgo_callfn_GDExtensionSpxSpriteSetColliderCapsule(const GDExtensionSpxSpriteSetColliderCapsule fn, GdObj obj, GdVec2 center, GdVec2 size) {
	fn(obj, center, size);
}
void cgo_callfn_GDExtensionSpxSpriteSetCollisionEnabled(const GDExtensionSpxSpriteSetCollisionEnabled fn, GdObj obj, GdBool enabled) {
	fn(obj, enabled);
}
void cgo_callfn_GDExtensionSpxSpriteIsCollisionEnabled(const GDExtensionSpxSpriteIsCollisionEnabled fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxSpriteSetTriggerRect(const GDExtensionSpxSpriteSetTriggerRect fn, GdObj obj, GdVec2 center, GdVec2 size) {
	fn(obj, center, size);
}
void cgo_callfn_GDExtensionSpxSpriteSetTriggerCircle(const GDExtensionSpxSpriteSetTriggerCircle fn, GdObj obj, GdVec2 center, GdFloat radius) {
	fn(obj, center, radius);
}
void cgo_callfn_GDExtensionSpxSpriteSetTriggerCapsule(const GDExtensionSpxSpriteSetTriggerCapsule fn, GdObj obj, GdVec2 center, GdVec2 size) {
	fn(obj, center, size);
}
void cgo_callfn_GDExtensionSpxSpriteSetTriggerEnabled(const GDExtensionSpxSpriteSetTriggerEnabled fn, GdObj obj, GdBool trigger) {
	fn(obj, trigger);
}
void cgo_callfn_GDExtensionSpxSpriteIsTriggerEnabled(const GDExtensionSpxSpriteIsTriggerEnabled fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxUICreateButton(const GDExtensionSpxUICreateButton fn, GdString path, GdRect2 rect, GdString text, GdInt* ret_val) {
	fn(path, rect, text,ret_val);
}
void cgo_callfn_GDExtensionSpxUICreateLabel(const GDExtensionSpxUICreateLabel fn, GdString path, GdRect2 rect, GdString text, GdInt* ret_val) {
	fn(path, rect, text,ret_val);
}
void cgo_callfn_GDExtensionSpxUICreateImage(const GDExtensionSpxUICreateImage fn, GdString path, GdRect2 rect, GdColor color, GdInt* ret_val) {
	fn(path, rect, color,ret_val);
}
void cgo_callfn_GDExtensionSpxUICreateSlider(const GDExtensionSpxUICreateSlider fn, GdString path, GdRect2 rect, GdFloat value, GdInt* ret_val) {
	fn(path, rect, value,ret_val);
}
void cgo_callfn_GDExtensionSpxUICreateToggle(const GDExtensionSpxUICreateToggle fn, GdString path, GdRect2 rect, GdBool value, GdInt* ret_val) {
	fn(path, rect, value,ret_val);
}
void cgo_callfn_GDExtensionSpxUICreateInput(const GDExtensionSpxUICreateInput fn, GdString path, GdRect2 rect, GdString text, GdInt* ret_val) {
	fn(path, rect, text,ret_val);
}
void cgo_callfn_GDExtensionSpxUIGetType(const GDExtensionSpxUIGetType fn, GdObj obj, GdInt* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxUISetInteractable(const GDExtensionSpxUISetInteractable fn, GdObj obj, GdBool interactable) {
	fn(obj, interactable);
}
void cgo_callfn_GDExtensionSpxUIGetInteractable(const GDExtensionSpxUIGetInteractable fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxUISetText(const GDExtensionSpxUISetText fn, GdObj obj, GdString text) {
	fn(obj, text);
}
void cgo_callfn_GDExtensionSpxUIGetText(const GDExtensionSpxUIGetText fn, GdObj obj, GdString* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxUISetRect(const GDExtensionSpxUISetRect fn, GdObj obj, GdRect2 rect) {
	fn(obj, rect);
}
void cgo_callfn_GDExtensionSpxUIGetRect(const GDExtensionSpxUIGetRect fn, GdObj obj, GdRect2* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxUISetColor(const GDExtensionSpxUISetColor fn, GdObj obj, GdColor color) {
	fn(obj, color);
}
void cgo_callfn_GDExtensionSpxUIGetColor(const GDExtensionSpxUIGetColor fn, GdObj obj, GdColor* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxUISetFontSize(const GDExtensionSpxUISetFontSize fn, GdObj obj, GdFloat size) {
	fn(obj, size);
}
void cgo_callfn_GDExtensionSpxUIGetFontSize(const GDExtensionSpxUIGetFontSize fn, GdObj obj, GdFloat* ret_val) {
	fn(obj,ret_val);
}
void cgo_callfn_GDExtensionSpxUISetVisible(const GDExtensionSpxUISetVisible fn, GdObj obj, GdBool visible) {
	fn(obj, visible);
}
void cgo_callfn_GDExtensionSpxUIGetVisible(const GDExtensionSpxUIGetVisible fn, GdObj obj, GdBool* ret_val) {
	fn(obj,ret_val);
}
#endif
