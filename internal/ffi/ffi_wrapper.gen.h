#ifndef CGO_GODOT_GO_GDEXTENSION_WRAPPER_H
#define CGO_GODOT_GO_GDEXTENSION_WRAPPER_H


/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.c.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.h.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
#include "gdextension_spx_codegen_header.h"

/* Go cannot call C function pointers directly, so we must generate C wrapper code to call the functions. */

inline void cgo_callfn_GDExtensionSpxGlobalRegisterCallbacks(const GDExtensionSpxGlobalRegisterCallbacks fn, GDExtensionSpxCallbackInfoPtr callback_ptr) {
	 fn(callback_ptr);
}
inline GdVec2 cgo_callfn_GDExtensionSpxInputGetMousePos(const GDExtensionSpxInputGetMousePos fn) {
	return fn();
}
inline GdBool cgo_callfn_GDExtensionSpxInputGetMouseState(const GDExtensionSpxInputGetMouseState fn, GdInt id) {
	return fn(id);
}
inline GdInt cgo_callfn_GDExtensionSpxInputGetKeyState(const GDExtensionSpxInputGetKeyState fn, GdInt key) {
	return fn(key);
}
inline GdFloat cgo_callfn_GDExtensionSpxInputGetAxis(const GDExtensionSpxInputGetAxis fn, GdString axis) {
	return fn(axis);
}
inline GdBool cgo_callfn_GDExtensionSpxInputIsActionPressed(const GDExtensionSpxInputIsActionPressed fn, GdString action) {
	return fn(action);
}
inline GdBool cgo_callfn_GDExtensionSpxInputIsActionJustPressed(const GDExtensionSpxInputIsActionJustPressed fn, GdString action) {
	return fn(action);
}
inline GdBool cgo_callfn_GDExtensionSpxInputIsActionJustReleased(const GDExtensionSpxInputIsActionJustReleased fn, GdString action) {
	return fn(action);
}
inline void cgo_callfn_GDExtensionSpxAudioPlayAudio(const GDExtensionSpxAudioPlayAudio fn, GdString path) {
	 fn(path);
}
inline void cgo_callfn_GDExtensionSpxAudioSetAudioVolume(const GDExtensionSpxAudioSetAudioVolume fn, GdFloat volume) {
	 fn(volume);
}
inline GdFloat cgo_callfn_GDExtensionSpxAudioGetAudioVolume(const GDExtensionSpxAudioGetAudioVolume fn) {
	return fn();
}
inline GdBool cgo_callfn_GDExtensionSpxAudioIsMusicPlaying(const GDExtensionSpxAudioIsMusicPlaying fn) {
	return fn();
}
inline void cgo_callfn_GDExtensionSpxAudioPlayMusic(const GDExtensionSpxAudioPlayMusic fn, GdString path) {
	 fn(path);
}
inline void cgo_callfn_GDExtensionSpxAudioSetMusicVolume(const GDExtensionSpxAudioSetMusicVolume fn, GdFloat volume) {
	 fn(volume);
}
inline GdFloat cgo_callfn_GDExtensionSpxAudioGetMusicVolume(const GDExtensionSpxAudioGetMusicVolume fn) {
	return fn();
}
inline void cgo_callfn_GDExtensionSpxAudioPauseMusic(const GDExtensionSpxAudioPauseMusic fn) {
	 fn();
}
inline void cgo_callfn_GDExtensionSpxAudioResumeMusic(const GDExtensionSpxAudioResumeMusic fn) {
	 fn();
}
inline GdFloat cgo_callfn_GDExtensionSpxAudioGetMusicTimer(const GDExtensionSpxAudioGetMusicTimer fn) {
	return fn();
}
inline void cgo_callfn_GDExtensionSpxAudioSetMusicTimer(const GDExtensionSpxAudioSetMusicTimer fn, GdFloat time) {
	 fn(time);
}
inline void cgo_callfn_GDExtensionSpxPhysicSetGravity(const GDExtensionSpxPhysicSetGravity fn, GdFloat gravity) {
	 fn(gravity);
}
inline GdFloat cgo_callfn_GDExtensionSpxPhysicGetGravity(const GDExtensionSpxPhysicGetGravity fn) {
	return fn();
}
inline void cgo_callfn_GDExtensionSpxPhysicSetVelocity(const GDExtensionSpxPhysicSetVelocity fn, GdInt id, GdVec2 velocity) {
	 fn(id, velocity);
}
inline GdVec2 cgo_callfn_GDExtensionSpxPhysicGetVelocity(const GDExtensionSpxPhysicGetVelocity fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxPhysicSetMass(const GDExtensionSpxPhysicSetMass fn, GdInt id, GdFloat mass) {
	 fn(id, mass);
}
inline GdFloat cgo_callfn_GDExtensionSpxPhysicGetMass(const GDExtensionSpxPhysicGetMass fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxPhysicAddForce(const GDExtensionSpxPhysicAddForce fn, GdInt id, GdVec2 force) {
	 fn(id, force);
}
inline void cgo_callfn_GDExtensionSpxPhysicAddImpulse(const GDExtensionSpxPhysicAddImpulse fn, GdInt id, GdVec2 impulse) {
	 fn(id, impulse);
}
inline void cgo_callfn_GDExtensionSpxPhysicSetCollisionLayer(const GDExtensionSpxPhysicSetCollisionLayer fn, GdInt id, GdInt layer) {
	 fn(id, layer);
}
inline GdInt cgo_callfn_GDExtensionSpxPhysicGetCollisionLayer(const GDExtensionSpxPhysicGetCollisionLayer fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxPhysicSetCollisionMask(const GDExtensionSpxPhysicSetCollisionMask fn, GdInt id, GdInt mask) {
	 fn(id, mask);
}
inline GdInt cgo_callfn_GDExtensionSpxPhysicGetCollisionMask(const GDExtensionSpxPhysicGetCollisionMask fn, GdInt id) {
	return fn(id);
}
inline GdInt cgo_callfn_GDExtensionSpxPhysicGetColliderType(const GDExtensionSpxPhysicGetColliderType fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxPhysicAddColliderRect(const GDExtensionSpxPhysicAddColliderRect fn, GdInt id, GdVec2 center, GdVec2 size) {
	 fn(id, center, size);
}
inline void cgo_callfn_GDExtensionSpxPhysicAddColliderCircle(const GDExtensionSpxPhysicAddColliderCircle fn, GdInt id, GdVec2 center, GdFloat radius) {
	 fn(id, center, radius);
}
inline void cgo_callfn_GDExtensionSpxPhysicAddColliderCapsule(const GDExtensionSpxPhysicAddColliderCapsule fn, GdInt id, GdVec2 center, GdVec2 size) {
	 fn(id, center, size);
}
inline void cgo_callfn_GDExtensionSpxPhysicSetTrigger(const GDExtensionSpxPhysicSetTrigger fn, GdInt id, GdBool trigger) {
	 fn(id, trigger);
}
inline GdBool cgo_callfn_GDExtensionSpxPhysicIsTrigger(const GDExtensionSpxPhysicIsTrigger fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxPhysicSetCollisionEnabled(const GDExtensionSpxPhysicSetCollisionEnabled fn, GdInt id, GdBool enabled) {
	 fn(id, enabled);
}
inline GdBool cgo_callfn_GDExtensionSpxPhysicIsCollisionEnabled(const GDExtensionSpxPhysicIsCollisionEnabled fn, GdInt id) {
	return fn(id);
}
inline GdInt cgo_callfn_GDExtensionSpxSpriteCreateSprite(const GDExtensionSpxSpriteCreateSprite fn, GdString path) {
	return fn(path);
}
inline GdInt cgo_callfn_GDExtensionSpxSpriteCloneSprite(const GDExtensionSpxSpriteCloneSprite fn, GdInt id) {
	return fn(id);
}
inline GdBool cgo_callfn_GDExtensionSpxSpriteDestroySprite(const GDExtensionSpxSpriteDestroySprite fn, GdInt id) {
	return fn(id);
}
inline GdBool cgo_callfn_GDExtensionSpxSpriteIsSpriteAlive(const GDExtensionSpxSpriteIsSpriteAlive fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxSpriteSetPosition(const GDExtensionSpxSpriteSetPosition fn, GdInt id, GdVec2 pos) {
	 fn(id, pos);
}
inline void cgo_callfn_GDExtensionSpxSpriteSetRotation(const GDExtensionSpxSpriteSetRotation fn, GdInt id, GdVec2 rot) {
	 fn(id, rot);
}
inline void cgo_callfn_GDExtensionSpxSpriteSetScale(const GDExtensionSpxSpriteSetScale fn, GdInt id, GdVec2 scale) {
	 fn(id, scale);
}
inline GdVec2 cgo_callfn_GDExtensionSpxSpriteGetPosition(const GDExtensionSpxSpriteGetPosition fn, GdInt id) {
	return fn(id);
}
inline GdVec2 cgo_callfn_GDExtensionSpxSpriteGetRotation(const GDExtensionSpxSpriteGetRotation fn, GdInt id) {
	return fn(id);
}
inline GdVec2 cgo_callfn_GDExtensionSpxSpriteGetScale(const GDExtensionSpxSpriteGetScale fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxSpriteSetColor(const GDExtensionSpxSpriteSetColor fn, GdInt id, GdColor GdColor) {
	 fn(id, GdColor);
}
inline GdColor cgo_callfn_GDExtensionSpxSpriteGetColor(const GDExtensionSpxSpriteGetColor fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxSpriteUpdateTexture(const GDExtensionSpxSpriteUpdateTexture fn, GdInt id, GdString path) {
	 fn(id, path);
}
inline GdString cgo_callfn_GDExtensionSpxSpriteGetTexture(const GDExtensionSpxSpriteGetTexture fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxSpriteSetVisible(const GDExtensionSpxSpriteSetVisible fn, GdInt id, GdBool visible) {
	 fn(id, visible);
}
inline GdBool cgo_callfn_GDExtensionSpxSpriteGetVisible(const GDExtensionSpxSpriteGetVisible fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxSpriteUpdateZIndex(const GDExtensionSpxSpriteUpdateZIndex fn, GdInt id, GdInt z) {
	 fn(id, z);
}
inline GdInt cgo_callfn_GDExtensionSpxUICreateButton(const GDExtensionSpxUICreateButton fn, GdString path, GdRect rect, GdString text) {
	return fn(path, rect, text);
}
inline GdInt cgo_callfn_GDExtensionSpxUICreateLabel(const GDExtensionSpxUICreateLabel fn, GdString path, GdRect rect, GdString text) {
	return fn(path, rect, text);
}
inline GdInt cgo_callfn_GDExtensionSpxUICreateImage(const GDExtensionSpxUICreateImage fn, GdString path, GdRect rect, GdColor GdColor) {
	return fn(path, rect, GdColor);
}
inline GdInt cgo_callfn_GDExtensionSpxUICreateSlider(const GDExtensionSpxUICreateSlider fn, GdString path, GdRect rect, GdFloat value) {
	return fn(path, rect, value);
}
inline GdInt cgo_callfn_GDExtensionSpxUICreateToggle(const GDExtensionSpxUICreateToggle fn, GdString path, GdRect rect, GdBool value) {
	return fn(path, rect, value);
}
inline GdInt cgo_callfn_GDExtensionSpxUICreateInput(const GDExtensionSpxUICreateInput fn, GdString path, GdRect rect, GdString text) {
	return fn(path, rect, text);
}
inline GdInt cgo_callfn_GDExtensionSpxUIGetType(const GDExtensionSpxUIGetType fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxUISetInteractable(const GDExtensionSpxUISetInteractable fn, GdInt id, GdBool interactable) {
	 fn(id, interactable);
}
inline GdBool cgo_callfn_GDExtensionSpxUIGetInteractable(const GDExtensionSpxUIGetInteractable fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxUISetText(const GDExtensionSpxUISetText fn, GdInt id, GdString text) {
	 fn(id, text);
}
inline GdString cgo_callfn_GDExtensionSpxUIGetText(const GDExtensionSpxUIGetText fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxUISetRect(const GDExtensionSpxUISetRect fn, GdInt id, GdRect rect) {
	 fn(id, rect);
}
inline GdRect cgo_callfn_GDExtensionSpxUIGetRect(const GDExtensionSpxUIGetRect fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxUISetColor(const GDExtensionSpxUISetColor fn, GdInt id, GdColor GdColor) {
	 fn(id, GdColor);
}
inline GdColor cgo_callfn_GDExtensionSpxUIGetColor(const GDExtensionSpxUIGetColor fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxUISetFontSize(const GDExtensionSpxUISetFontSize fn, GdInt id, GdFloat size) {
	 fn(id, size);
}
inline GdFloat cgo_callfn_GDExtensionSpxUIGetFontSize(const GDExtensionSpxUIGetFontSize fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxUISetVisible(const GDExtensionSpxUISetVisible fn, GdInt id, GdBool visible) {
	 fn(id, visible);
}
inline GdBool cgo_callfn_GDExtensionSpxUIGetVisible(const GDExtensionSpxUIGetVisible fn, GdInt id) {
	return fn(id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnEngineStart(const GDExtensionSpxCallbackOnEngineStart fn) {
	 fn();
}
inline void cgo_callfn_GDExtensionSpxCallbackOnEngineUpdate(const GDExtensionSpxCallbackOnEngineUpdate fn, GdFloat delta) {
	 fn(delta);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnEngineDestroy(const GDExtensionSpxCallbackOnEngineDestroy fn) {
	 fn();
}
inline void cgo_callfn_GDExtensionSpxCallbackOnSpriteReady(const GDExtensionSpxCallbackOnSpriteReady fn, GdInt id) {
	 fn(id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnSpriteUpdated(const GDExtensionSpxCallbackOnSpriteUpdated fn, GdInt id) {
	 fn(id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnSpriteDestroyed(const GDExtensionSpxCallbackOnSpriteDestroyed fn, GdInt id) {
	 fn(id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnMousePressed(const GDExtensionSpxCallbackOnMousePressed fn, GdInt keyid) {
	 fn(keyid);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnMouseReleased(const GDExtensionSpxCallbackOnMouseReleased fn, GdInt keyid) {
	 fn(keyid);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnKeyPressed(const GDExtensionSpxCallbackOnKeyPressed fn, GdInt keyid) {
	 fn(keyid);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnKeyReleased(const GDExtensionSpxCallbackOnKeyReleased fn, GdInt keyid) {
	 fn(keyid);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnActionPressed(const GDExtensionSpxCallbackOnActionPressed fn, GdString action_name) {
	 fn(action_name);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnActionJustPressed(const GDExtensionSpxCallbackOnActionJustPressed fn, GdString action_name) {
	 fn(action_name);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnActionJustReleased(const GDExtensionSpxCallbackOnActionJustReleased fn, GdString action_name) {
	 fn(action_name);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnAxisChanged(const GDExtensionSpxCallbackOnAxisChanged fn, GdString action_name, GdFloat value) {
	 fn(action_name, value);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnCollisionEnter(const GDExtensionSpxCallbackOnCollisionEnter fn, GdInt self_id, GdInt other_id) {
	 fn(self_id, other_id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnCollisionStay(const GDExtensionSpxCallbackOnCollisionStay fn, GdInt self_id, GdInt other_id) {
	 fn(self_id, other_id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnCollisionExit(const GDExtensionSpxCallbackOnCollisionExit fn, GdInt self_id, GdInt other_id) {
	 fn(self_id, other_id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnTriggerEnter(const GDExtensionSpxCallbackOnTriggerEnter fn, GdInt self_id, GdInt other_id) {
	 fn(self_id, other_id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnTriggerStay(const GDExtensionSpxCallbackOnTriggerStay fn, GdInt self_id, GdInt other_id) {
	 fn(self_id, other_id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnTriggerExit(const GDExtensionSpxCallbackOnTriggerExit fn, GdInt self_id, GdInt other_id) {
	 fn(self_id, other_id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnUIPressed(const GDExtensionSpxCallbackOnUIPressed fn, GdInt id) {
	 fn(id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnUIReleased(const GDExtensionSpxCallbackOnUIReleased fn, GdInt id) {
	 fn(id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnUIHovered(const GDExtensionSpxCallbackOnUIHovered fn, GdInt id) {
	 fn(id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnUIClicked(const GDExtensionSpxCallbackOnUIClicked fn, GdInt id) {
	 fn(id);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnUIToggle(const GDExtensionSpxCallbackOnUIToggle fn, GdInt id, GdBool is_on) {
	 fn(id, is_on);
}
inline void cgo_callfn_GDExtensionSpxCallbackOnUITextChanged(const GDExtensionSpxCallbackOnUITextChanged fn, GdInt id, GdString text) {
	 fn(id, text);
}
inline void cgo_callfn_GDExtensionSpxStringNewWithLatin1Chars(const GDExtensionSpxStringNewWithLatin1Chars fn, GDExtensionUninitializedStringPtr r_dest, const char *  p_contents) {
	 fn(r_dest, p_contents);
}
inline void cgo_callfn_GDExtensionSpxStringNewWithUtf8Chars(const GDExtensionSpxStringNewWithUtf8Chars fn, GDExtensionUninitializedStringPtr r_dest, const char *  p_contents) {
	 fn(r_dest, p_contents);
}
inline void cgo_callfn_GDExtensionSpxStringNewWithLatin1CharsAndLen(const GDExtensionSpxStringNewWithLatin1CharsAndLen fn, GDExtensionUninitializedStringPtr r_dest, const char *  p_contents, GdInt p_size) {
	 fn(r_dest, p_contents, p_size);
}
inline void cgo_callfn_GDExtensionSpxStringNewWithUtf8CharsAndLen(const GDExtensionSpxStringNewWithUtf8CharsAndLen fn, GDExtensionUninitializedStringPtr r_dest, const char *  p_contents, GdInt p_size) {
	 fn(r_dest, p_contents, p_size);
}
inline GdInt cgo_callfn_GDExtensionSpxStringToLatin1Chars(const GDExtensionSpxStringToLatin1Chars fn, GDExtensionConstStringPtr p_self, char *  r_text, GdInt p_max_write_length) {
	return fn(p_self, r_text, p_max_write_length);
}
inline GdInt cgo_callfn_GDExtensionSpxStringToUtf8Chars(const GDExtensionSpxStringToUtf8Chars fn, GDExtensionConstStringPtr p_self, char *  r_text, GdInt p_max_write_length) {
	return fn(p_self, r_text, p_max_write_length);
}
inline GDExtensionPtrConstructor cgo_callfn_GDExtensionSpxVariantGetPtrConstructor(const GDExtensionSpxVariantGetPtrConstructor fn, GDExtensionVariantType p_type, int32_t p_constructor) {
	return fn(p_type, p_constructor);
}
inline GDExtensionPtrDestructor cgo_callfn_GDExtensionSpxVariantGetPtrDestructor(const GDExtensionSpxVariantGetPtrDestructor fn, GDExtensionVariantType p_type) {
	return fn(p_type);
}
#endif
