/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
package ffi

//revive:disable

// #include "gdextension_spx_codegen_header.h"
// #include "ffi_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
)

// C type aliases
type Uint64T C.uint64_t
type Uint32T C.uint32_t
type Uint16T C.uint16_t
type Uint8T C.uint8_t
type Int32T C.int32_t
type Int16T C.int16_t
type Int8T C.int8_t
type Char C.char
type WcharT C.wchar_t
type Char32T C.char32_t
type Char16T C.char16_t
type RealT C.real_t
type Gdreal C.GDReal
type GdextensionStringPtr C.GDExtensionStringPtr
type GdextensionInt C.GDExtensionInt
type GdextensionBool C.GDExtensionBool

type gdstring C.gdstring
type gdint C.gdint
type gdbool C.gdbool
type gdfloat C.gdfloat
type gdvec4 C.gdvec4
type gdvec3 C.gdvec3
type gdvec2 C.gdvec2
type gdcolor C.gdcolor
type gdrect C.gdrect
type GdextensionSpxCallbackInfoPtr C.GDExtensionSpxCallbackInfoPtr
// enums


// C function aliases
type GDExtensionSpxGlobalRegisterCallbacks C.GDExtensionSpxGlobalRegisterCallbacks
type GDExtensionSpxInputGetMousePos C.GDExtensionSpxInputGetMousePos
type GDExtensionSpxInputGetMouseState C.GDExtensionSpxInputGetMouseState
type GDExtensionSpxInputGetKeyState C.GDExtensionSpxInputGetKeyState
type GDExtensionSpxInputGetAxis C.GDExtensionSpxInputGetAxis
type GDExtensionSpxInputIsActionPressed C.GDExtensionSpxInputIsActionPressed
type GDExtensionSpxInputIsActionJustPressed C.GDExtensionSpxInputIsActionJustPressed
type GDExtensionSpxInputIsActionJustReleased C.GDExtensionSpxInputIsActionJustReleased
type GDExtensionSpxAudioPlayAudio C.GDExtensionSpxAudioPlayAudio
type GDExtensionSpxAudioSetAudioVolume C.GDExtensionSpxAudioSetAudioVolume
type GDExtensionSpxAudioGetAudioVolume C.GDExtensionSpxAudioGetAudioVolume
type GDExtensionSpxAudioIsMusicPlaying C.GDExtensionSpxAudioIsMusicPlaying
type GDExtensionSpxAudioPlayMusic C.GDExtensionSpxAudioPlayMusic
type GDExtensionSpxAudioSetMusicVolume C.GDExtensionSpxAudioSetMusicVolume
type GDExtensionSpxAudioGetMusicVolume C.GDExtensionSpxAudioGetMusicVolume
type GDExtensionSpxAudioPauseMusic C.GDExtensionSpxAudioPauseMusic
type GDExtensionSpxAudioResumeMusic C.GDExtensionSpxAudioResumeMusic
type GDExtensionSpxAudioGetMusicTimer C.GDExtensionSpxAudioGetMusicTimer
type GDExtensionSpxAudioSetMusicTimer C.GDExtensionSpxAudioSetMusicTimer
type GDExtensionSpxPhysicSetGravity C.GDExtensionSpxPhysicSetGravity
type GDExtensionSpxPhysicGetGravity C.GDExtensionSpxPhysicGetGravity
type GDExtensionSpxPhysicSetVelocity C.GDExtensionSpxPhysicSetVelocity
type GDExtensionSpxPhysicGetVelocity C.GDExtensionSpxPhysicGetVelocity
type GDExtensionSpxPhysicSetMass C.GDExtensionSpxPhysicSetMass
type GDExtensionSpxPhysicGetMass C.GDExtensionSpxPhysicGetMass
type GDExtensionSpxPhysicAddForce C.GDExtensionSpxPhysicAddForce
type GDExtensionSpxPhysicAddImpulse C.GDExtensionSpxPhysicAddImpulse
type GDExtensionSpxPhysicSetCollisionLayer C.GDExtensionSpxPhysicSetCollisionLayer
type GDExtensionSpxPhysicGetCollisionLayer C.GDExtensionSpxPhysicGetCollisionLayer
type GDExtensionSpxPhysicSetCollisionMask C.GDExtensionSpxPhysicSetCollisionMask
type GDExtensionSpxPhysicGetCollisionMask C.GDExtensionSpxPhysicGetCollisionMask
type GDExtensionSpxPhysicGetColliderType C.GDExtensionSpxPhysicGetColliderType
type GDExtensionSpxPhysicAddColliderRect C.GDExtensionSpxPhysicAddColliderRect
type GDExtensionSpxPhysicAddColliderCircle C.GDExtensionSpxPhysicAddColliderCircle
type GDExtensionSpxPhysicAddColliderCapsule C.GDExtensionSpxPhysicAddColliderCapsule
type GDExtensionSpxPhysicSetTrigger C.GDExtensionSpxPhysicSetTrigger
type GDExtensionSpxPhysicIsTrigger C.GDExtensionSpxPhysicIsTrigger
type GDExtensionSpxPhysicSetCollisionEnabled C.GDExtensionSpxPhysicSetCollisionEnabled
type GDExtensionSpxPhysicIsCollisionEnabled C.GDExtensionSpxPhysicIsCollisionEnabled
type GDExtensionSpxSpriteCreateSprite C.GDExtensionSpxSpriteCreateSprite
type GDExtensionSpxSpriteCloneSprite C.GDExtensionSpxSpriteCloneSprite
type GDExtensionSpxSpriteDestroySprite C.GDExtensionSpxSpriteDestroySprite
type GDExtensionSpxSpriteIsSpriteAlive C.GDExtensionSpxSpriteIsSpriteAlive
type GDExtensionSpxSpriteSetPosition C.GDExtensionSpxSpriteSetPosition
type GDExtensionSpxSpriteSetRotation C.GDExtensionSpxSpriteSetRotation
type GDExtensionSpxSpriteSetScale C.GDExtensionSpxSpriteSetScale
type GDExtensionSpxSpriteGetPosition C.GDExtensionSpxSpriteGetPosition
type GDExtensionSpxSpriteGetRotation C.GDExtensionSpxSpriteGetRotation
type GDExtensionSpxSpriteGetScale C.GDExtensionSpxSpriteGetScale
type GDExtensionSpxSpriteSetColor C.GDExtensionSpxSpriteSetColor
type GDExtensionSpxSpriteGetColor C.GDExtensionSpxSpriteGetColor
type GDExtensionSpxSpriteUpdateTexture C.GDExtensionSpxSpriteUpdateTexture
type GDExtensionSpxSpriteGetTexture C.GDExtensionSpxSpriteGetTexture
type GDExtensionSpxSpriteSetVisible C.GDExtensionSpxSpriteSetVisible
type GDExtensionSpxSpriteGetVisible C.GDExtensionSpxSpriteGetVisible
type GDExtensionSpxSpriteUpdateZIndex C.GDExtensionSpxSpriteUpdateZIndex
type GDExtensionSpxUICreateButton C.GDExtensionSpxUICreateButton
type GDExtensionSpxUICreateLabel C.GDExtensionSpxUICreateLabel
type GDExtensionSpxUICreateImage C.GDExtensionSpxUICreateImage
type GDExtensionSpxUICreateSlider C.GDExtensionSpxUICreateSlider
type GDExtensionSpxUICreateToggle C.GDExtensionSpxUICreateToggle
type GDExtensionSpxUICreateInput C.GDExtensionSpxUICreateInput
type GDExtensionSpxUIGetType C.GDExtensionSpxUIGetType
type GDExtensionSpxUISetInteractable C.GDExtensionSpxUISetInteractable
type GDExtensionSpxUIGetInteractable C.GDExtensionSpxUIGetInteractable
type GDExtensionSpxUISetText C.GDExtensionSpxUISetText
type GDExtensionSpxUIGetText C.GDExtensionSpxUIGetText
type GDExtensionSpxUISetRect C.GDExtensionSpxUISetRect
type GDExtensionSpxUIGetRect C.GDExtensionSpxUIGetRect
type GDExtensionSpxUISetColor C.GDExtensionSpxUISetColor
type GDExtensionSpxUIGetColor C.GDExtensionSpxUIGetColor
type GDExtensionSpxUISetFontSize C.GDExtensionSpxUISetFontSize
type GDExtensionSpxUIGetFontSize C.GDExtensionSpxUIGetFontSize
type GDExtensionSpxUISetVisible C.GDExtensionSpxUISetVisible
type GDExtensionSpxUIGetVisible C.GDExtensionSpxUIGetVisible
type GDExtensionSpxCallbackOnEngineStart C.GDExtensionSpxCallbackOnEngineStart
type GDExtensionSpxCallbackOnEngineUpdate C.GDExtensionSpxCallbackOnEngineUpdate
type GDExtensionSpxCallbackOnEngineDestroy C.GDExtensionSpxCallbackOnEngineDestroy
type GDExtensionSpxCallbackOnSpriteReady C.GDExtensionSpxCallbackOnSpriteReady
type GDExtensionSpxCallbackOnSpriteUpdated C.GDExtensionSpxCallbackOnSpriteUpdated
type GDExtensionSpxCallbackOnSpriteDestroyed C.GDExtensionSpxCallbackOnSpriteDestroyed
type GDExtensionSpxCallbackOnMousePressed C.GDExtensionSpxCallbackOnMousePressed
type GDExtensionSpxCallbackOnMouseReleased C.GDExtensionSpxCallbackOnMouseReleased
type GDExtensionSpxCallbackOnKeyPressed C.GDExtensionSpxCallbackOnKeyPressed
type GDExtensionSpxCallbackOnKeyReleased C.GDExtensionSpxCallbackOnKeyReleased
type GDExtensionSpxCallbackOnActionPressed C.GDExtensionSpxCallbackOnActionPressed
type GDExtensionSpxCallbackOnActionJustPressed C.GDExtensionSpxCallbackOnActionJustPressed
type GDExtensionSpxCallbackOnActionJustReleased C.GDExtensionSpxCallbackOnActionJustReleased
type GDExtensionSpxCallbackOnAxisChanged C.GDExtensionSpxCallbackOnAxisChanged
type GDExtensionSpxCallbackOnCollisionEnter C.GDExtensionSpxCallbackOnCollisionEnter
type GDExtensionSpxCallbackOnCollisionStay C.GDExtensionSpxCallbackOnCollisionStay
type GDExtensionSpxCallbackOnCollisionExit C.GDExtensionSpxCallbackOnCollisionExit
type GDExtensionSpxCallbackOnTriggerEnter C.GDExtensionSpxCallbackOnTriggerEnter
type GDExtensionSpxCallbackOnTriggerStay C.GDExtensionSpxCallbackOnTriggerStay
type GDExtensionSpxCallbackOnTriggerExit C.GDExtensionSpxCallbackOnTriggerExit
type GDExtensionSpxCallbackOnUIPressed C.GDExtensionSpxCallbackOnUIPressed
type GDExtensionSpxCallbackOnUIReleased C.GDExtensionSpxCallbackOnUIReleased
type GDExtensionSpxCallbackOnUIHovered C.GDExtensionSpxCallbackOnUIHovered
type GDExtensionSpxCallbackOnUIClicked C.GDExtensionSpxCallbackOnUIClicked
type GDExtensionSpxCallbackOnUIToggle C.GDExtensionSpxCallbackOnUIToggle
type GDExtensionSpxCallbackOnUITextChanged C.GDExtensionSpxCallbackOnUITextChanged
type GDExtensionSpxCallbackInfoPtr C.GDExtensionSpxCallbackInfoPtr



// call gdextension interface functions

func CallFunc_GDExtensionSpxGlobalRegisterCallbacks(
	callback_ptr GDExtensionSpxCallbackInfoPtr,
	)  {
	arg0 := (C.GDExtensionSpxGlobalRegisterCallbacks)(FFI.GDExtensionSpxGlobalRegisterCallbacks)
	arg1 := (C.GDExtensionSpxCallbackInfoPtr)(callback_ptr)
	

	

	println("called C.cgo_callfn_GDExtensionSpxGlobalRegisterCallbacks")

	C.cgo_callfn_GDExtensionSpxGlobalRegisterCallbacks(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxInputGetMousePos(
	) gdvec2 {
	arg0 := (C.GDExtensionSpxInputGetMousePos)(FFI.GDExtensionSpxInputGetMousePos)
	

	

	println("called C.cgo_callfn_GDExtensionSpxInputGetMousePos")

	ret := C.cgo_callfn_GDExtensionSpxInputGetMousePos(arg0,)

	

	// gdvec2
	return (gdvec2)(ret)
	}

func CallFunc_GDExtensionSpxInputGetMouseState(
	id gdint,
	) gdbool {
	arg0 := (C.GDExtensionSpxInputGetMouseState)(FFI.GDExtensionSpxInputGetMouseState)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxInputGetMouseState")

	ret := C.cgo_callfn_GDExtensionSpxInputGetMouseState(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxInputGetKeyState(
	key gdint,
	) gdint {
	arg0 := (C.GDExtensionSpxInputGetKeyState)(FFI.GDExtensionSpxInputGetKeyState)
	arg1 := (C.gdint)(key)
	

	

	println("called C.cgo_callfn_GDExtensionSpxInputGetKeyState")

	ret := C.cgo_callfn_GDExtensionSpxInputGetKeyState(arg0,arg1,)

	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxInputGetAxis(
	axis gdstring,
	) gdfloat {
	arg0 := (C.GDExtensionSpxInputGetAxis)(FFI.GDExtensionSpxInputGetAxis)
	arg1 := (C.gdstring)(axis)
	

	

	println("called C.cgo_callfn_GDExtensionSpxInputGetAxis")

	ret := C.cgo_callfn_GDExtensionSpxInputGetAxis(arg0,arg1,)

	
	

	// gdfloat
	return (gdfloat)(ret)
	}

func CallFunc_GDExtensionSpxInputIsActionPressed(
	action gdstring,
	) gdbool {
	arg0 := (C.GDExtensionSpxInputIsActionPressed)(FFI.GDExtensionSpxInputIsActionPressed)
	arg1 := (C.gdstring)(action)
	

	

	println("called C.cgo_callfn_GDExtensionSpxInputIsActionPressed")

	ret := C.cgo_callfn_GDExtensionSpxInputIsActionPressed(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxInputIsActionJustPressed(
	action gdstring,
	) gdbool {
	arg0 := (C.GDExtensionSpxInputIsActionJustPressed)(FFI.GDExtensionSpxInputIsActionJustPressed)
	arg1 := (C.gdstring)(action)
	

	

	println("called C.cgo_callfn_GDExtensionSpxInputIsActionJustPressed")

	ret := C.cgo_callfn_GDExtensionSpxInputIsActionJustPressed(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxInputIsActionJustReleased(
	action gdstring,
	) gdbool {
	arg0 := (C.GDExtensionSpxInputIsActionJustReleased)(FFI.GDExtensionSpxInputIsActionJustReleased)
	arg1 := (C.gdstring)(action)
	

	

	println("called C.cgo_callfn_GDExtensionSpxInputIsActionJustReleased")

	ret := C.cgo_callfn_GDExtensionSpxInputIsActionJustReleased(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxAudioPlayAudio(
	path gdstring,
	)  {
	arg0 := (C.GDExtensionSpxAudioPlayAudio)(FFI.GDExtensionSpxAudioPlayAudio)
	arg1 := (C.gdstring)(path)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioPlayAudio")

	C.cgo_callfn_GDExtensionSpxAudioPlayAudio(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxAudioSetAudioVolume(
	volume gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetAudioVolume)(FFI.GDExtensionSpxAudioSetAudioVolume)
	arg1 := (C.gdfloat)(volume)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioSetAudioVolume")

	C.cgo_callfn_GDExtensionSpxAudioSetAudioVolume(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxAudioGetAudioVolume(
	) gdfloat {
	arg0 := (C.GDExtensionSpxAudioGetAudioVolume)(FFI.GDExtensionSpxAudioGetAudioVolume)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioGetAudioVolume")

	ret := C.cgo_callfn_GDExtensionSpxAudioGetAudioVolume(arg0,)

	

	// gdfloat
	return (gdfloat)(ret)
	}

func CallFunc_GDExtensionSpxAudioIsMusicPlaying(
	) gdbool {
	arg0 := (C.GDExtensionSpxAudioIsMusicPlaying)(FFI.GDExtensionSpxAudioIsMusicPlaying)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioIsMusicPlaying")

	ret := C.cgo_callfn_GDExtensionSpxAudioIsMusicPlaying(arg0,)

	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxAudioPlayMusic(
	path gdstring,
	)  {
	arg0 := (C.GDExtensionSpxAudioPlayMusic)(FFI.GDExtensionSpxAudioPlayMusic)
	arg1 := (C.gdstring)(path)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioPlayMusic")

	C.cgo_callfn_GDExtensionSpxAudioPlayMusic(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxAudioSetMusicVolume(
	volume gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetMusicVolume)(FFI.GDExtensionSpxAudioSetMusicVolume)
	arg1 := (C.gdfloat)(volume)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioSetMusicVolume")

	C.cgo_callfn_GDExtensionSpxAudioSetMusicVolume(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxAudioGetMusicVolume(
	) gdfloat {
	arg0 := (C.GDExtensionSpxAudioGetMusicVolume)(FFI.GDExtensionSpxAudioGetMusicVolume)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioGetMusicVolume")

	ret := C.cgo_callfn_GDExtensionSpxAudioGetMusicVolume(arg0,)

	

	// gdfloat
	return (gdfloat)(ret)
	}

func CallFunc_GDExtensionSpxAudioPauseMusic(
	)  {
	arg0 := (C.GDExtensionSpxAudioPauseMusic)(FFI.GDExtensionSpxAudioPauseMusic)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioPauseMusic")

	C.cgo_callfn_GDExtensionSpxAudioPauseMusic(arg0,)

	}

func CallFunc_GDExtensionSpxAudioResumeMusic(
	)  {
	arg0 := (C.GDExtensionSpxAudioResumeMusic)(FFI.GDExtensionSpxAudioResumeMusic)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioResumeMusic")

	C.cgo_callfn_GDExtensionSpxAudioResumeMusic(arg0,)

	}

func CallFunc_GDExtensionSpxAudioGetMusicTimer(
	) gdfloat {
	arg0 := (C.GDExtensionSpxAudioGetMusicTimer)(FFI.GDExtensionSpxAudioGetMusicTimer)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioGetMusicTimer")

	ret := C.cgo_callfn_GDExtensionSpxAudioGetMusicTimer(arg0,)

	

	// gdfloat
	return (gdfloat)(ret)
	}

func CallFunc_GDExtensionSpxAudioSetMusicTimer(
	time gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetMusicTimer)(FFI.GDExtensionSpxAudioSetMusicTimer)
	arg1 := (C.gdfloat)(time)
	

	

	println("called C.cgo_callfn_GDExtensionSpxAudioSetMusicTimer")

	C.cgo_callfn_GDExtensionSpxAudioSetMusicTimer(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxPhysicSetGravity(
	gravity gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetGravity)(FFI.GDExtensionSpxPhysicSetGravity)
	arg1 := (C.gdfloat)(gravity)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicSetGravity")

	C.cgo_callfn_GDExtensionSpxPhysicSetGravity(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxPhysicGetGravity(
	) gdfloat {
	arg0 := (C.GDExtensionSpxPhysicGetGravity)(FFI.GDExtensionSpxPhysicGetGravity)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicGetGravity")

	ret := C.cgo_callfn_GDExtensionSpxPhysicGetGravity(arg0,)

	

	// gdfloat
	return (gdfloat)(ret)
	}

func CallFunc_GDExtensionSpxPhysicSetVelocity(
	id gdint,
	velocity gdvec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetVelocity)(FFI.GDExtensionSpxPhysicSetVelocity)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(velocity)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicSetVelocity")

	C.cgo_callfn_GDExtensionSpxPhysicSetVelocity(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxPhysicGetVelocity(
	id gdint,
	) gdvec2 {
	arg0 := (C.GDExtensionSpxPhysicGetVelocity)(FFI.GDExtensionSpxPhysicGetVelocity)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicGetVelocity")

	ret := C.cgo_callfn_GDExtensionSpxPhysicGetVelocity(arg0,arg1,)

	
	

	// gdvec2
	return (gdvec2)(ret)
	}

func CallFunc_GDExtensionSpxPhysicSetMass(
	id gdint,
	mass gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetMass)(FFI.GDExtensionSpxPhysicSetMass)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdfloat)(mass)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicSetMass")

	C.cgo_callfn_GDExtensionSpxPhysicSetMass(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxPhysicGetMass(
	id gdint,
	) gdfloat {
	arg0 := (C.GDExtensionSpxPhysicGetMass)(FFI.GDExtensionSpxPhysicGetMass)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicGetMass")

	ret := C.cgo_callfn_GDExtensionSpxPhysicGetMass(arg0,arg1,)

	
	

	// gdfloat
	return (gdfloat)(ret)
	}

func CallFunc_GDExtensionSpxPhysicAddForce(
	id gdint,
	force gdvec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddForce)(FFI.GDExtensionSpxPhysicAddForce)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(force)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicAddForce")

	C.cgo_callfn_GDExtensionSpxPhysicAddForce(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxPhysicAddImpulse(
	id gdint,
	impulse gdvec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddImpulse)(FFI.GDExtensionSpxPhysicAddImpulse)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(impulse)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicAddImpulse")

	C.cgo_callfn_GDExtensionSpxPhysicAddImpulse(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxPhysicSetCollisionLayer(
	id gdint,
	layer gdint,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetCollisionLayer)(FFI.GDExtensionSpxPhysicSetCollisionLayer)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdint)(layer)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicSetCollisionLayer")

	C.cgo_callfn_GDExtensionSpxPhysicSetCollisionLayer(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxPhysicGetCollisionLayer(
	id gdint,
	) gdint {
	arg0 := (C.GDExtensionSpxPhysicGetCollisionLayer)(FFI.GDExtensionSpxPhysicGetCollisionLayer)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicGetCollisionLayer")

	ret := C.cgo_callfn_GDExtensionSpxPhysicGetCollisionLayer(arg0,arg1,)

	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxPhysicSetCollisionMask(
	id gdint,
	mask gdint,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetCollisionMask)(FFI.GDExtensionSpxPhysicSetCollisionMask)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdint)(mask)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicSetCollisionMask")

	C.cgo_callfn_GDExtensionSpxPhysicSetCollisionMask(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxPhysicGetCollisionMask(
	id gdint,
	) gdint {
	arg0 := (C.GDExtensionSpxPhysicGetCollisionMask)(FFI.GDExtensionSpxPhysicGetCollisionMask)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicGetCollisionMask")

	ret := C.cgo_callfn_GDExtensionSpxPhysicGetCollisionMask(arg0,arg1,)

	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxPhysicGetColliderType(
	id gdint,
	) gdint {
	arg0 := (C.GDExtensionSpxPhysicGetColliderType)(FFI.GDExtensionSpxPhysicGetColliderType)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicGetColliderType")

	ret := C.cgo_callfn_GDExtensionSpxPhysicGetColliderType(arg0,arg1,)

	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxPhysicAddColliderRect(
	id gdint,
	center gdvec2,
	size gdvec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddColliderRect)(FFI.GDExtensionSpxPhysicAddColliderRect)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(center)
	arg3 := (C.gdvec2)(size)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicAddColliderRect")

	C.cgo_callfn_GDExtensionSpxPhysicAddColliderRect(arg0,arg1,arg2,arg3,)

	
	
	
	}

func CallFunc_GDExtensionSpxPhysicAddColliderCircle(
	id gdint,
	center gdvec2,
	radius gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddColliderCircle)(FFI.GDExtensionSpxPhysicAddColliderCircle)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(center)
	arg3 := (C.gdfloat)(radius)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicAddColliderCircle")

	C.cgo_callfn_GDExtensionSpxPhysicAddColliderCircle(arg0,arg1,arg2,arg3,)

	
	
	
	}

func CallFunc_GDExtensionSpxPhysicAddColliderCapsule(
	id gdint,
	center gdvec2,
	size gdvec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddColliderCapsule)(FFI.GDExtensionSpxPhysicAddColliderCapsule)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(center)
	arg3 := (C.gdvec2)(size)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicAddColliderCapsule")

	C.cgo_callfn_GDExtensionSpxPhysicAddColliderCapsule(arg0,arg1,arg2,arg3,)

	
	
	
	}

func CallFunc_GDExtensionSpxPhysicSetTrigger(
	id gdint,
	trigger gdbool,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetTrigger)(FFI.GDExtensionSpxPhysicSetTrigger)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdbool)(trigger)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicSetTrigger")

	C.cgo_callfn_GDExtensionSpxPhysicSetTrigger(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxPhysicIsTrigger(
	id gdint,
	) gdbool {
	arg0 := (C.GDExtensionSpxPhysicIsTrigger)(FFI.GDExtensionSpxPhysicIsTrigger)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicIsTrigger")

	ret := C.cgo_callfn_GDExtensionSpxPhysicIsTrigger(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxPhysicSetCollisionEnabled(
	id gdint,
	enabled gdbool,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetCollisionEnabled)(FFI.GDExtensionSpxPhysicSetCollisionEnabled)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdbool)(enabled)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicSetCollisionEnabled")

	C.cgo_callfn_GDExtensionSpxPhysicSetCollisionEnabled(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxPhysicIsCollisionEnabled(
	id gdint,
	) gdbool {
	arg0 := (C.GDExtensionSpxPhysicIsCollisionEnabled)(FFI.GDExtensionSpxPhysicIsCollisionEnabled)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxPhysicIsCollisionEnabled")

	ret := C.cgo_callfn_GDExtensionSpxPhysicIsCollisionEnabled(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxSpriteCreateSprite(
	path gdstring,
	) gdint {
	arg0 := (C.GDExtensionSpxSpriteCreateSprite)(FFI.GDExtensionSpxSpriteCreateSprite)
	arg1 := (C.gdstring)(path)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteCreateSprite")

	ret := C.cgo_callfn_GDExtensionSpxSpriteCreateSprite(arg0,arg1,)

	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxSpriteCloneSprite(
	id gdint,
	) gdint {
	arg0 := (C.GDExtensionSpxSpriteCloneSprite)(FFI.GDExtensionSpxSpriteCloneSprite)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteCloneSprite")

	ret := C.cgo_callfn_GDExtensionSpxSpriteCloneSprite(arg0,arg1,)

	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxSpriteDestroySprite(
	id gdint,
	) gdbool {
	arg0 := (C.GDExtensionSpxSpriteDestroySprite)(FFI.GDExtensionSpxSpriteDestroySprite)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteDestroySprite")

	ret := C.cgo_callfn_GDExtensionSpxSpriteDestroySprite(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxSpriteIsSpriteAlive(
	id gdint,
	) gdbool {
	arg0 := (C.GDExtensionSpxSpriteIsSpriteAlive)(FFI.GDExtensionSpxSpriteIsSpriteAlive)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteIsSpriteAlive")

	ret := C.cgo_callfn_GDExtensionSpxSpriteIsSpriteAlive(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxSpriteSetPosition(
	id gdint,
	pos gdvec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetPosition)(FFI.GDExtensionSpxSpriteSetPosition)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(pos)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteSetPosition")

	C.cgo_callfn_GDExtensionSpxSpriteSetPosition(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxSpriteSetRotation(
	id gdint,
	rot gdvec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetRotation)(FFI.GDExtensionSpxSpriteSetRotation)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(rot)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteSetRotation")

	C.cgo_callfn_GDExtensionSpxSpriteSetRotation(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxSpriteSetScale(
	id gdint,
	scale gdvec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetScale)(FFI.GDExtensionSpxSpriteSetScale)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdvec2)(scale)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteSetScale")

	C.cgo_callfn_GDExtensionSpxSpriteSetScale(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxSpriteGetPosition(
	id gdint,
	) gdvec2 {
	arg0 := (C.GDExtensionSpxSpriteGetPosition)(FFI.GDExtensionSpxSpriteGetPosition)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteGetPosition")

	ret := C.cgo_callfn_GDExtensionSpxSpriteGetPosition(arg0,arg1,)

	
	

	// gdvec2
	return (gdvec2)(ret)
	}

func CallFunc_GDExtensionSpxSpriteGetRotation(
	id gdint,
	) gdvec2 {
	arg0 := (C.GDExtensionSpxSpriteGetRotation)(FFI.GDExtensionSpxSpriteGetRotation)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteGetRotation")

	ret := C.cgo_callfn_GDExtensionSpxSpriteGetRotation(arg0,arg1,)

	
	

	// gdvec2
	return (gdvec2)(ret)
	}

func CallFunc_GDExtensionSpxSpriteGetScale(
	id gdint,
	) gdvec2 {
	arg0 := (C.GDExtensionSpxSpriteGetScale)(FFI.GDExtensionSpxSpriteGetScale)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteGetScale")

	ret := C.cgo_callfn_GDExtensionSpxSpriteGetScale(arg0,arg1,)

	
	

	// gdvec2
	return (gdvec2)(ret)
	}

func CallFunc_GDExtensionSpxSpriteSetColor(
	id gdint,
	gdcolor gdcolor,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetColor)(FFI.GDExtensionSpxSpriteSetColor)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdcolor)(gdcolor)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteSetColor")

	C.cgo_callfn_GDExtensionSpxSpriteSetColor(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxSpriteGetColor(
	id gdint,
	) gdcolor {
	arg0 := (C.GDExtensionSpxSpriteGetColor)(FFI.GDExtensionSpxSpriteGetColor)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteGetColor")

	ret := C.cgo_callfn_GDExtensionSpxSpriteGetColor(arg0,arg1,)

	
	

	// gdcolor
	return (gdcolor)(ret)
	}

func CallFunc_GDExtensionSpxSpriteUpdateTexture(
	id gdint,
	path gdstring,
	)  {
	arg0 := (C.GDExtensionSpxSpriteUpdateTexture)(FFI.GDExtensionSpxSpriteUpdateTexture)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdstring)(path)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteUpdateTexture")

	C.cgo_callfn_GDExtensionSpxSpriteUpdateTexture(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxSpriteGetTexture(
	id gdint,
	) gdstring {
	arg0 := (C.GDExtensionSpxSpriteGetTexture)(FFI.GDExtensionSpxSpriteGetTexture)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteGetTexture")

	ret := C.cgo_callfn_GDExtensionSpxSpriteGetTexture(arg0,arg1,)

	
	

	// gdstring
	return (gdstring)(ret)
	}

func CallFunc_GDExtensionSpxSpriteSetVisible(
	id gdint,
	visible gdbool,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetVisible)(FFI.GDExtensionSpxSpriteSetVisible)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdbool)(visible)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteSetVisible")

	C.cgo_callfn_GDExtensionSpxSpriteSetVisible(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxSpriteGetVisible(
	id gdint,
	) gdbool {
	arg0 := (C.GDExtensionSpxSpriteGetVisible)(FFI.GDExtensionSpxSpriteGetVisible)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteGetVisible")

	ret := C.cgo_callfn_GDExtensionSpxSpriteGetVisible(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxSpriteUpdateZIndex(
	id gdint,
	z gdint,
	)  {
	arg0 := (C.GDExtensionSpxSpriteUpdateZIndex)(FFI.GDExtensionSpxSpriteUpdateZIndex)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdint)(z)
	

	

	println("called C.cgo_callfn_GDExtensionSpxSpriteUpdateZIndex")

	C.cgo_callfn_GDExtensionSpxSpriteUpdateZIndex(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxUICreateButton(
	path gdstring,
	rect gdrect,
	text gdstring,
	) gdint {
	arg0 := (C.GDExtensionSpxUICreateButton)(FFI.GDExtensionSpxUICreateButton)
	arg1 := (C.gdstring)(path)
	arg2 := (C.gdrect)(rect)
	arg3 := (C.gdstring)(text)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUICreateButton")

	ret := C.cgo_callfn_GDExtensionSpxUICreateButton(arg0,arg1,arg2,arg3,)

	
	
	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxUICreateLabel(
	path gdstring,
	rect gdrect,
	text gdstring,
	) gdint {
	arg0 := (C.GDExtensionSpxUICreateLabel)(FFI.GDExtensionSpxUICreateLabel)
	arg1 := (C.gdstring)(path)
	arg2 := (C.gdrect)(rect)
	arg3 := (C.gdstring)(text)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUICreateLabel")

	ret := C.cgo_callfn_GDExtensionSpxUICreateLabel(arg0,arg1,arg2,arg3,)

	
	
	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxUICreateImage(
	path gdstring,
	rect gdrect,
	gdcolor gdcolor,
	) gdint {
	arg0 := (C.GDExtensionSpxUICreateImage)(FFI.GDExtensionSpxUICreateImage)
	arg1 := (C.gdstring)(path)
	arg2 := (C.gdrect)(rect)
	arg3 := (C.gdcolor)(gdcolor)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUICreateImage")

	ret := C.cgo_callfn_GDExtensionSpxUICreateImage(arg0,arg1,arg2,arg3,)

	
	
	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxUICreateSlider(
	path gdstring,
	rect gdrect,
	value gdfloat,
	) gdint {
	arg0 := (C.GDExtensionSpxUICreateSlider)(FFI.GDExtensionSpxUICreateSlider)
	arg1 := (C.gdstring)(path)
	arg2 := (C.gdrect)(rect)
	arg3 := (C.gdfloat)(value)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUICreateSlider")

	ret := C.cgo_callfn_GDExtensionSpxUICreateSlider(arg0,arg1,arg2,arg3,)

	
	
	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxUICreateToggle(
	path gdstring,
	rect gdrect,
	value gdbool,
	) gdint {
	arg0 := (C.GDExtensionSpxUICreateToggle)(FFI.GDExtensionSpxUICreateToggle)
	arg1 := (C.gdstring)(path)
	arg2 := (C.gdrect)(rect)
	arg3 := (C.gdbool)(value)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUICreateToggle")

	ret := C.cgo_callfn_GDExtensionSpxUICreateToggle(arg0,arg1,arg2,arg3,)

	
	
	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxUICreateInput(
	path gdstring,
	rect gdrect,
	text gdstring,
	) gdint {
	arg0 := (C.GDExtensionSpxUICreateInput)(FFI.GDExtensionSpxUICreateInput)
	arg1 := (C.gdstring)(path)
	arg2 := (C.gdrect)(rect)
	arg3 := (C.gdstring)(text)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUICreateInput")

	ret := C.cgo_callfn_GDExtensionSpxUICreateInput(arg0,arg1,arg2,arg3,)

	
	
	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxUIGetType(
	id gdint,
	) gdint {
	arg0 := (C.GDExtensionSpxUIGetType)(FFI.GDExtensionSpxUIGetType)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUIGetType")

	ret := C.cgo_callfn_GDExtensionSpxUIGetType(arg0,arg1,)

	
	

	// gdint
	return (gdint)(ret)
	}

func CallFunc_GDExtensionSpxUISetInteractable(
	id gdint,
	interactable gdbool,
	)  {
	arg0 := (C.GDExtensionSpxUISetInteractable)(FFI.GDExtensionSpxUISetInteractable)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdbool)(interactable)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUISetInteractable")

	C.cgo_callfn_GDExtensionSpxUISetInteractable(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxUIGetInteractable(
	id gdint,
	) gdbool {
	arg0 := (C.GDExtensionSpxUIGetInteractable)(FFI.GDExtensionSpxUIGetInteractable)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUIGetInteractable")

	ret := C.cgo_callfn_GDExtensionSpxUIGetInteractable(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxUISetText(
	id gdint,
	text gdstring,
	)  {
	arg0 := (C.GDExtensionSpxUISetText)(FFI.GDExtensionSpxUISetText)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdstring)(text)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUISetText")

	C.cgo_callfn_GDExtensionSpxUISetText(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxUIGetText(
	id gdint,
	) gdstring {
	arg0 := (C.GDExtensionSpxUIGetText)(FFI.GDExtensionSpxUIGetText)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUIGetText")

	ret := C.cgo_callfn_GDExtensionSpxUIGetText(arg0,arg1,)

	
	

	// gdstring
	return (gdstring)(ret)
	}

func CallFunc_GDExtensionSpxUISetRect(
	id gdint,
	rect gdrect,
	)  {
	arg0 := (C.GDExtensionSpxUISetRect)(FFI.GDExtensionSpxUISetRect)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdrect)(rect)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUISetRect")

	C.cgo_callfn_GDExtensionSpxUISetRect(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxUIGetRect(
	id gdint,
	) gdrect {
	arg0 := (C.GDExtensionSpxUIGetRect)(FFI.GDExtensionSpxUIGetRect)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUIGetRect")

	ret := C.cgo_callfn_GDExtensionSpxUIGetRect(arg0,arg1,)

	
	

	// gdrect
	return (gdrect)(ret)
	}

func CallFunc_GDExtensionSpxUISetColor(
	id gdint,
	gdcolor gdcolor,
	)  {
	arg0 := (C.GDExtensionSpxUISetColor)(FFI.GDExtensionSpxUISetColor)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdcolor)(gdcolor)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUISetColor")

	C.cgo_callfn_GDExtensionSpxUISetColor(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxUIGetColor(
	id gdint,
	) gdcolor {
	arg0 := (C.GDExtensionSpxUIGetColor)(FFI.GDExtensionSpxUIGetColor)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUIGetColor")

	ret := C.cgo_callfn_GDExtensionSpxUIGetColor(arg0,arg1,)

	
	

	// gdcolor
	return (gdcolor)(ret)
	}

func CallFunc_GDExtensionSpxUISetFontSize(
	id gdint,
	size gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxUISetFontSize)(FFI.GDExtensionSpxUISetFontSize)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdfloat)(size)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUISetFontSize")

	C.cgo_callfn_GDExtensionSpxUISetFontSize(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxUIGetFontSize(
	id gdint,
	) gdfloat {
	arg0 := (C.GDExtensionSpxUIGetFontSize)(FFI.GDExtensionSpxUIGetFontSize)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUIGetFontSize")

	ret := C.cgo_callfn_GDExtensionSpxUIGetFontSize(arg0,arg1,)

	
	

	// gdfloat
	return (gdfloat)(ret)
	}

func CallFunc_GDExtensionSpxUISetVisible(
	id gdint,
	visible gdbool,
	)  {
	arg0 := (C.GDExtensionSpxUISetVisible)(FFI.GDExtensionSpxUISetVisible)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdbool)(visible)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUISetVisible")

	C.cgo_callfn_GDExtensionSpxUISetVisible(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxUIGetVisible(
	id gdint,
	) gdbool {
	arg0 := (C.GDExtensionSpxUIGetVisible)(FFI.GDExtensionSpxUIGetVisible)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxUIGetVisible")

	ret := C.cgo_callfn_GDExtensionSpxUIGetVisible(arg0,arg1,)

	
	

	// gdbool
	return (gdbool)(ret)
	}

func CallFunc_GDExtensionSpxCallbackOnEngineStart(
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnEngineStart)(FFI.GDExtensionSpxCallbackOnEngineStart)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnEngineStart")

	C.cgo_callfn_GDExtensionSpxCallbackOnEngineStart(arg0,)

	}

func CallFunc_GDExtensionSpxCallbackOnEngineUpdate(
	delta gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnEngineUpdate)(FFI.GDExtensionSpxCallbackOnEngineUpdate)
	arg1 := (C.gdfloat)(delta)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnEngineUpdate")

	C.cgo_callfn_GDExtensionSpxCallbackOnEngineUpdate(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnEngineDestroy(
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnEngineDestroy)(FFI.GDExtensionSpxCallbackOnEngineDestroy)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnEngineDestroy")

	C.cgo_callfn_GDExtensionSpxCallbackOnEngineDestroy(arg0,)

	}

func CallFunc_GDExtensionSpxCallbackOnSpriteReady(
	id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnSpriteReady)(FFI.GDExtensionSpxCallbackOnSpriteReady)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnSpriteReady")

	C.cgo_callfn_GDExtensionSpxCallbackOnSpriteReady(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnSpriteUpdated(
	id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnSpriteUpdated)(FFI.GDExtensionSpxCallbackOnSpriteUpdated)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnSpriteUpdated")

	C.cgo_callfn_GDExtensionSpxCallbackOnSpriteUpdated(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnSpriteDestroyed(
	id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnSpriteDestroyed)(FFI.GDExtensionSpxCallbackOnSpriteDestroyed)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnSpriteDestroyed")

	C.cgo_callfn_GDExtensionSpxCallbackOnSpriteDestroyed(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnMousePressed(
	keyid gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnMousePressed)(FFI.GDExtensionSpxCallbackOnMousePressed)
	arg1 := (C.gdint)(keyid)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnMousePressed")

	C.cgo_callfn_GDExtensionSpxCallbackOnMousePressed(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnMouseReleased(
	keyid gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnMouseReleased)(FFI.GDExtensionSpxCallbackOnMouseReleased)
	arg1 := (C.gdint)(keyid)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnMouseReleased")

	C.cgo_callfn_GDExtensionSpxCallbackOnMouseReleased(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnKeyPressed(
	keyid gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnKeyPressed)(FFI.GDExtensionSpxCallbackOnKeyPressed)
	arg1 := (C.gdint)(keyid)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnKeyPressed")

	C.cgo_callfn_GDExtensionSpxCallbackOnKeyPressed(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnKeyReleased(
	keyid gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnKeyReleased)(FFI.GDExtensionSpxCallbackOnKeyReleased)
	arg1 := (C.gdint)(keyid)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnKeyReleased")

	C.cgo_callfn_GDExtensionSpxCallbackOnKeyReleased(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnActionPressed(
	action_name gdstring,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnActionPressed)(FFI.GDExtensionSpxCallbackOnActionPressed)
	arg1 := (C.gdstring)(action_name)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnActionPressed")

	C.cgo_callfn_GDExtensionSpxCallbackOnActionPressed(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnActionJustPressed(
	action_name gdstring,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnActionJustPressed)(FFI.GDExtensionSpxCallbackOnActionJustPressed)
	arg1 := (C.gdstring)(action_name)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnActionJustPressed")

	C.cgo_callfn_GDExtensionSpxCallbackOnActionJustPressed(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnActionJustReleased(
	action_name gdstring,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnActionJustReleased)(FFI.GDExtensionSpxCallbackOnActionJustReleased)
	arg1 := (C.gdstring)(action_name)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnActionJustReleased")

	C.cgo_callfn_GDExtensionSpxCallbackOnActionJustReleased(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnAxisChanged(
	action_name gdstring,
	value gdfloat,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnAxisChanged)(FFI.GDExtensionSpxCallbackOnAxisChanged)
	arg1 := (C.gdstring)(action_name)
	arg2 := (C.gdfloat)(value)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnAxisChanged")

	C.cgo_callfn_GDExtensionSpxCallbackOnAxisChanged(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxCallbackOnCollisionEnter(
	self_id gdint,
	other_id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnCollisionEnter)(FFI.GDExtensionSpxCallbackOnCollisionEnter)
	arg1 := (C.gdint)(self_id)
	arg2 := (C.gdint)(other_id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnCollisionEnter")

	C.cgo_callfn_GDExtensionSpxCallbackOnCollisionEnter(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxCallbackOnCollisionStay(
	self_id gdint,
	other_id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnCollisionStay)(FFI.GDExtensionSpxCallbackOnCollisionStay)
	arg1 := (C.gdint)(self_id)
	arg2 := (C.gdint)(other_id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnCollisionStay")

	C.cgo_callfn_GDExtensionSpxCallbackOnCollisionStay(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxCallbackOnCollisionExit(
	self_id gdint,
	other_id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnCollisionExit)(FFI.GDExtensionSpxCallbackOnCollisionExit)
	arg1 := (C.gdint)(self_id)
	arg2 := (C.gdint)(other_id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnCollisionExit")

	C.cgo_callfn_GDExtensionSpxCallbackOnCollisionExit(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxCallbackOnTriggerEnter(
	self_id gdint,
	other_id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnTriggerEnter)(FFI.GDExtensionSpxCallbackOnTriggerEnter)
	arg1 := (C.gdint)(self_id)
	arg2 := (C.gdint)(other_id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnTriggerEnter")

	C.cgo_callfn_GDExtensionSpxCallbackOnTriggerEnter(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxCallbackOnTriggerStay(
	self_id gdint,
	other_id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnTriggerStay)(FFI.GDExtensionSpxCallbackOnTriggerStay)
	arg1 := (C.gdint)(self_id)
	arg2 := (C.gdint)(other_id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnTriggerStay")

	C.cgo_callfn_GDExtensionSpxCallbackOnTriggerStay(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxCallbackOnTriggerExit(
	self_id gdint,
	other_id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnTriggerExit)(FFI.GDExtensionSpxCallbackOnTriggerExit)
	arg1 := (C.gdint)(self_id)
	arg2 := (C.gdint)(other_id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnTriggerExit")

	C.cgo_callfn_GDExtensionSpxCallbackOnTriggerExit(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxCallbackOnUIPressed(
	id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnUIPressed)(FFI.GDExtensionSpxCallbackOnUIPressed)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnUIPressed")

	C.cgo_callfn_GDExtensionSpxCallbackOnUIPressed(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnUIReleased(
	id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnUIReleased)(FFI.GDExtensionSpxCallbackOnUIReleased)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnUIReleased")

	C.cgo_callfn_GDExtensionSpxCallbackOnUIReleased(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnUIHovered(
	id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnUIHovered)(FFI.GDExtensionSpxCallbackOnUIHovered)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnUIHovered")

	C.cgo_callfn_GDExtensionSpxCallbackOnUIHovered(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnUIClicked(
	id gdint,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnUIClicked)(FFI.GDExtensionSpxCallbackOnUIClicked)
	arg1 := (C.gdint)(id)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnUIClicked")

	C.cgo_callfn_GDExtensionSpxCallbackOnUIClicked(arg0,arg1,)

	
	}

func CallFunc_GDExtensionSpxCallbackOnUIToggle(
	id gdint,
	is_on gdbool,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnUIToggle)(FFI.GDExtensionSpxCallbackOnUIToggle)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdbool)(is_on)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnUIToggle")

	C.cgo_callfn_GDExtensionSpxCallbackOnUIToggle(arg0,arg1,arg2,)

	
	
	}

func CallFunc_GDExtensionSpxCallbackOnUITextChanged(
	id gdint,
	text gdstring,
	)  {
	arg0 := (C.GDExtensionSpxCallbackOnUITextChanged)(FFI.GDExtensionSpxCallbackOnUITextChanged)
	arg1 := (C.gdint)(id)
	arg2 := (C.gdstring)(text)
	

	

	println("called C.cgo_callfn_GDExtensionSpxCallbackOnUITextChanged")

	C.cgo_callfn_GDExtensionSpxCallbackOnUITextChanged(arg0,arg1,arg2,)

	
	
	}


// structs
type Vector4 C.Vector4
type Vector3 C.Vector3
type Vector2 C.Vector2
type Color C.Color
type Rect2 C.Rect2
type SpxCallbackInfo C.SpxCallbackInfo
// struct functions
