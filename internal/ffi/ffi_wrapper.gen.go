/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
package ffi

//revive:disable

// #include "gdextension_spx_codegen_header.h"
// #include "ffi_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"unsafe"
)

// C type aliases
// enums


// C function aliases
type GDExtensionSpxGlobalRegisterCallbacks C.GDExtensionSpxGlobalRegisterCallbacks
type GDExtensionSpxCallbackOnEngineStart C.GDExtensionSpxCallbackOnEngineStart
type GDExtensionSpxCallbackOnEngineUpdate C.GDExtensionSpxCallbackOnEngineUpdate
type GDExtensionSpxCallbackOnEngineDestroy C.GDExtensionSpxCallbackOnEngineDestroy
type GDExtensionSpxCallbackOnSpriteReady C.GDExtensionSpxCallbackOnSpriteReady
type GDExtensionSpxCallbackOnSpriteUpdated C.GDExtensionSpxCallbackOnSpriteUpdated
type GDExtensionSpxCallbackOnSpriteDestroyed C.GDExtensionSpxCallbackOnSpriteDestroyed
type GDExtensionSpxCallbackOnMousePressed C.GDExtensionSpxCallbackOnMousePressed
type GDExtensionSpxCallbackOnMouseReleased C.GDExtensionSpxCallbackOnMouseReleased
type GDExtensionSpxCallbackOnKeyPressed C.GDExtensionSpxCallbackOnKeyPressed
type GDExtensionSpxCallbackOnKeyReleased C.GDExtensionSpxCallbackOnKeyReleased
type GDExtensionSpxCallbackOnActionPressed C.GDExtensionSpxCallbackOnActionPressed
type GDExtensionSpxCallbackOnActionJustPressed C.GDExtensionSpxCallbackOnActionJustPressed
type GDExtensionSpxCallbackOnActionJustReleased C.GDExtensionSpxCallbackOnActionJustReleased
type GDExtensionSpxCallbackOnAxisChanged C.GDExtensionSpxCallbackOnAxisChanged
type GDExtensionSpxCallbackOnCollisionEnter C.GDExtensionSpxCallbackOnCollisionEnter
type GDExtensionSpxCallbackOnCollisionStay C.GDExtensionSpxCallbackOnCollisionStay
type GDExtensionSpxCallbackOnCollisionExit C.GDExtensionSpxCallbackOnCollisionExit
type GDExtensionSpxCallbackOnTriggerEnter C.GDExtensionSpxCallbackOnTriggerEnter
type GDExtensionSpxCallbackOnTriggerStay C.GDExtensionSpxCallbackOnTriggerStay
type GDExtensionSpxCallbackOnTriggerExit C.GDExtensionSpxCallbackOnTriggerExit
type GDExtensionSpxCallbackOnUIPressed C.GDExtensionSpxCallbackOnUIPressed
type GDExtensionSpxCallbackOnUIReleased C.GDExtensionSpxCallbackOnUIReleased
type GDExtensionSpxCallbackOnUIHovered C.GDExtensionSpxCallbackOnUIHovered
type GDExtensionSpxCallbackOnUIClicked C.GDExtensionSpxCallbackOnUIClicked
type GDExtensionSpxCallbackOnUIToggle C.GDExtensionSpxCallbackOnUIToggle
type GDExtensionSpxCallbackOnUITextChanged C.GDExtensionSpxCallbackOnUITextChanged
type GDExtensionSpxStringNewWithLatin1Chars C.GDExtensionSpxStringNewWithLatin1Chars
type GDExtensionSpxStringNewWithUtf8Chars C.GDExtensionSpxStringNewWithUtf8Chars
type GDExtensionSpxStringNewWithLatin1CharsAndLen C.GDExtensionSpxStringNewWithLatin1CharsAndLen
type GDExtensionSpxStringNewWithUtf8CharsAndLen C.GDExtensionSpxStringNewWithUtf8CharsAndLen
type GDExtensionSpxStringToLatin1Chars C.GDExtensionSpxStringToLatin1Chars
type GDExtensionSpxStringToUtf8Chars C.GDExtensionSpxStringToUtf8Chars
type GDExtensionSpxVariantGetPtrConstructor C.GDExtensionSpxVariantGetPtrConstructor
type GDExtensionSpxVariantGetPtrDestructor C.GDExtensionSpxVariantGetPtrDestructor
type GDExtensionSpxAudioPlayAudio C.GDExtensionSpxAudioPlayAudio
type GDExtensionSpxAudioSetAudioVolume C.GDExtensionSpxAudioSetAudioVolume
type GDExtensionSpxAudioGetAudioVolume C.GDExtensionSpxAudioGetAudioVolume
type GDExtensionSpxAudioIsMusicPlaying C.GDExtensionSpxAudioIsMusicPlaying
type GDExtensionSpxAudioPlayMusic C.GDExtensionSpxAudioPlayMusic
type GDExtensionSpxAudioSetMusicVolume C.GDExtensionSpxAudioSetMusicVolume
type GDExtensionSpxAudioGetMusicVolume C.GDExtensionSpxAudioGetMusicVolume
type GDExtensionSpxAudioPauseMusic C.GDExtensionSpxAudioPauseMusic
type GDExtensionSpxAudioResumeMusic C.GDExtensionSpxAudioResumeMusic
type GDExtensionSpxAudioGetMusicTimer C.GDExtensionSpxAudioGetMusicTimer
type GDExtensionSpxAudioSetMusicTimer C.GDExtensionSpxAudioSetMusicTimer
type GDExtensionSpxInputGetMousePos C.GDExtensionSpxInputGetMousePos
type GDExtensionSpxInputGetMouseState C.GDExtensionSpxInputGetMouseState
type GDExtensionSpxInputGetKeyState C.GDExtensionSpxInputGetKeyState
type GDExtensionSpxInputGetAxis C.GDExtensionSpxInputGetAxis
type GDExtensionSpxInputIsActionPressed C.GDExtensionSpxInputIsActionPressed
type GDExtensionSpxInputIsActionJustPressed C.GDExtensionSpxInputIsActionJustPressed
type GDExtensionSpxInputIsActionJustReleased C.GDExtensionSpxInputIsActionJustReleased
type GDExtensionSpxPhysicSetGravity C.GDExtensionSpxPhysicSetGravity
type GDExtensionSpxPhysicGetGravity C.GDExtensionSpxPhysicGetGravity
type GDExtensionSpxPhysicSetVelocity C.GDExtensionSpxPhysicSetVelocity
type GDExtensionSpxPhysicGetVelocity C.GDExtensionSpxPhysicGetVelocity
type GDExtensionSpxPhysicSetMass C.GDExtensionSpxPhysicSetMass
type GDExtensionSpxPhysicGetMass C.GDExtensionSpxPhysicGetMass
type GDExtensionSpxPhysicAddForce C.GDExtensionSpxPhysicAddForce
type GDExtensionSpxPhysicAddImpulse C.GDExtensionSpxPhysicAddImpulse
type GDExtensionSpxPhysicSetCollisionLayer C.GDExtensionSpxPhysicSetCollisionLayer
type GDExtensionSpxPhysicGetCollisionLayer C.GDExtensionSpxPhysicGetCollisionLayer
type GDExtensionSpxPhysicSetCollisionMask C.GDExtensionSpxPhysicSetCollisionMask
type GDExtensionSpxPhysicGetCollisionMask C.GDExtensionSpxPhysicGetCollisionMask
type GDExtensionSpxPhysicGetColliderType C.GDExtensionSpxPhysicGetColliderType
type GDExtensionSpxPhysicAddColliderRect C.GDExtensionSpxPhysicAddColliderRect
type GDExtensionSpxPhysicAddColliderCircle C.GDExtensionSpxPhysicAddColliderCircle
type GDExtensionSpxPhysicAddColliderCapsule C.GDExtensionSpxPhysicAddColliderCapsule
type GDExtensionSpxPhysicSetTrigger C.GDExtensionSpxPhysicSetTrigger
type GDExtensionSpxPhysicIsTrigger C.GDExtensionSpxPhysicIsTrigger
type GDExtensionSpxPhysicSetCollisionEnabled C.GDExtensionSpxPhysicSetCollisionEnabled
type GDExtensionSpxPhysicIsCollisionEnabled C.GDExtensionSpxPhysicIsCollisionEnabled
type GDExtensionSpxSpriteCreateSprite C.GDExtensionSpxSpriteCreateSprite
type GDExtensionSpxSpriteCloneSprite C.GDExtensionSpxSpriteCloneSprite
type GDExtensionSpxSpriteDestroySprite C.GDExtensionSpxSpriteDestroySprite
type GDExtensionSpxSpriteIsSpriteAlive C.GDExtensionSpxSpriteIsSpriteAlive
type GDExtensionSpxSpriteSetPosition C.GDExtensionSpxSpriteSetPosition
type GDExtensionSpxSpriteSetRotation C.GDExtensionSpxSpriteSetRotation
type GDExtensionSpxSpriteSetScale C.GDExtensionSpxSpriteSetScale
type GDExtensionSpxSpriteGetPosition C.GDExtensionSpxSpriteGetPosition
type GDExtensionSpxSpriteGetRotation C.GDExtensionSpxSpriteGetRotation
type GDExtensionSpxSpriteGetScale C.GDExtensionSpxSpriteGetScale
type GDExtensionSpxSpriteSetColor C.GDExtensionSpxSpriteSetColor
type GDExtensionSpxSpriteGetColor C.GDExtensionSpxSpriteGetColor
type GDExtensionSpxSpriteUpdateTexture C.GDExtensionSpxSpriteUpdateTexture
type GDExtensionSpxSpriteGetTexture C.GDExtensionSpxSpriteGetTexture
type GDExtensionSpxSpriteSetVisible C.GDExtensionSpxSpriteSetVisible
type GDExtensionSpxSpriteGetVisible C.GDExtensionSpxSpriteGetVisible
type GDExtensionSpxSpriteUpdateZIndex C.GDExtensionSpxSpriteUpdateZIndex
type GDExtensionSpxUICreateButton C.GDExtensionSpxUICreateButton
type GDExtensionSpxUICreateLabel C.GDExtensionSpxUICreateLabel
type GDExtensionSpxUICreateImage C.GDExtensionSpxUICreateImage
type GDExtensionSpxUICreateSlider C.GDExtensionSpxUICreateSlider
type GDExtensionSpxUICreateToggle C.GDExtensionSpxUICreateToggle
type GDExtensionSpxUICreateInput C.GDExtensionSpxUICreateInput
type GDExtensionSpxUIGetType C.GDExtensionSpxUIGetType
type GDExtensionSpxUISetInteractable C.GDExtensionSpxUISetInteractable
type GDExtensionSpxUIGetInteractable C.GDExtensionSpxUIGetInteractable
type GDExtensionSpxUISetText C.GDExtensionSpxUISetText
type GDExtensionSpxUIGetText C.GDExtensionSpxUIGetText
type GDExtensionSpxUISetRect C.GDExtensionSpxUISetRect
type GDExtensionSpxUIGetRect C.GDExtensionSpxUIGetRect
type GDExtensionSpxUISetColor C.GDExtensionSpxUISetColor
type GDExtensionSpxUIGetColor C.GDExtensionSpxUIGetColor
type GDExtensionSpxUISetFontSize C.GDExtensionSpxUISetFontSize
type GDExtensionSpxUIGetFontSize C.GDExtensionSpxUIGetFontSize
type GDExtensionSpxUISetVisible C.GDExtensionSpxUISetVisible
type GDExtensionSpxUIGetVisible C.GDExtensionSpxUIGetVisible


// call gdextension interface functions
func CallGlobalRegisterCallbacks(
	callback_ptr GDExtensionSpxCallbackInfoPtr,
	)  {
	arg0 := (C.GDExtensionSpxGlobalRegisterCallbacks)(api.SpxGlobalRegisterCallbacks)
	arg1 := (C.GDExtensionSpxCallbackInfoPtr)(callback_ptr)
	C.cgo_callfn_GDExtensionSpxGlobalRegisterCallbacks(arg0,arg1,)
	
}
func CallStringNewWithLatin1Chars(
	r_dest GDExtensionUninitializedStringPtr,
	p_contents string,
	)  {
	arg0 := (C.GDExtensionSpxStringNewWithLatin1Chars)(api.SpxStringNewWithLatin1Chars)
	arg1 := (C.GDExtensionUninitializedStringPtr)(r_dest)
	arg2 := C.CString(p_contents)
	C.cgo_callfn_GDExtensionSpxStringNewWithLatin1Chars(arg0,arg1,arg2,)
	C.free(unsafe.Pointer(arg2))
	
}
func CallStringNewWithUtf8Chars(
	r_dest GDExtensionUninitializedStringPtr,
	p_contents string,
	)  {
	arg0 := (C.GDExtensionSpxStringNewWithUtf8Chars)(api.SpxStringNewWithUtf8Chars)
	arg1 := (C.GDExtensionUninitializedStringPtr)(r_dest)
	arg2 := C.CString(p_contents)
	C.cgo_callfn_GDExtensionSpxStringNewWithUtf8Chars(arg0,arg1,arg2,)
	C.free(unsafe.Pointer(arg2))
	
}
func CallStringNewWithLatin1CharsAndLen(
	r_dest GDExtensionUninitializedStringPtr,
	p_contents string,
	p_size GdInt,
	)  {
	arg0 := (C.GDExtensionSpxStringNewWithLatin1CharsAndLen)(api.SpxStringNewWithLatin1CharsAndLen)
	arg1 := (C.GDExtensionUninitializedStringPtr)(r_dest)
	arg2 := C.CString(p_contents)
	arg3 := (C.GdInt)(p_size)
	C.cgo_callfn_GDExtensionSpxStringNewWithLatin1CharsAndLen(arg0,arg1,arg2,arg3,)
	C.free(unsafe.Pointer(arg2))
	
	
}
func CallStringNewWithUtf8CharsAndLen(
	r_dest GDExtensionUninitializedStringPtr,
	p_contents string,
	p_size GdInt,
	)  {
	arg0 := (C.GDExtensionSpxStringNewWithUtf8CharsAndLen)(api.SpxStringNewWithUtf8CharsAndLen)
	arg1 := (C.GDExtensionUninitializedStringPtr)(r_dest)
	arg2 := C.CString(p_contents)
	arg3 := (C.GdInt)(p_size)
	C.cgo_callfn_GDExtensionSpxStringNewWithUtf8CharsAndLen(arg0,arg1,arg2,arg3,)
	C.free(unsafe.Pointer(arg2))
	
	
}
func CallStringToLatin1Chars(
	p_self GDExtensionConstStringPtr,
	r_text *Char,
	p_max_write_length GdInt,
	) GdInt {
	arg0 := (C.GDExtensionSpxStringToLatin1Chars)(api.SpxStringToLatin1Chars)
	arg1 := (C.GDExtensionConstStringPtr)(p_self)
	arg2 := (*C.char)(r_text)
	arg3 := (C.GdInt)(p_max_write_length)
	ret := C.cgo_callfn_GDExtensionSpxStringToLatin1Chars(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallStringToUtf8Chars(
	p_self GDExtensionConstStringPtr,
	r_text *Char,
	p_max_write_length GdInt,
	) GdInt {
	arg0 := (C.GDExtensionSpxStringToUtf8Chars)(api.SpxStringToUtf8Chars)
	arg1 := (C.GDExtensionConstStringPtr)(p_self)
	arg2 := (*C.char)(r_text)
	arg3 := (C.GdInt)(p_max_write_length)
	ret := C.cgo_callfn_GDExtensionSpxStringToUtf8Chars(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallVariantGetPtrConstructor(
	p_type GDExtensionVariantType,
	p_constructor int32,
	) GDExtensionPtrConstructor {
	arg0 := (C.GDExtensionSpxVariantGetPtrConstructor)(api.SpxVariantGetPtrConstructor)
	arg1 := (C.GDExtensionVariantType)(p_type)
	arg2 := (C.int32_t)(p_constructor)
	ret := C.cgo_callfn_GDExtensionSpxVariantGetPtrConstructor(arg0,arg1,arg2,)
	
	
	return (GDExtensionPtrConstructor)(ret)
}
func CallVariantGetPtrDestructor(
	p_type GDExtensionVariantType,
	) GDExtensionPtrDestructor {
	arg0 := (C.GDExtensionSpxVariantGetPtrDestructor)(api.SpxVariantGetPtrDestructor)
	arg1 := (C.GDExtensionVariantType)(p_type)
	ret := C.cgo_callfn_GDExtensionSpxVariantGetPtrDestructor(arg0,arg1,)
	
	return (GDExtensionPtrDestructor)(ret)
}
func CallAudioPlayAudio(
	path GdString,
	)  {
	arg0 := (C.GDExtensionSpxAudioPlayAudio)(api.SpxAudioPlayAudio)
	arg1 := (C.GdString)(path)
	C.cgo_callfn_GDExtensionSpxAudioPlayAudio(arg0,arg1,)
	
}
func CallAudioSetAudioVolume(
	volume GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetAudioVolume)(api.SpxAudioSetAudioVolume)
	arg1 := (C.GdFloat)(volume)
	C.cgo_callfn_GDExtensionSpxAudioSetAudioVolume(arg0,arg1,)
	
}
func CallAudioGetAudioVolume(
	) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetAudioVolume)(api.SpxAudioGetAudioVolume)
	ret := C.cgo_callfn_GDExtensionSpxAudioGetAudioVolume(arg0,)
	return (GdFloat)(ret)
}
func CallAudioIsMusicPlaying(
	) GdBool {
	arg0 := (C.GDExtensionSpxAudioIsMusicPlaying)(api.SpxAudioIsMusicPlaying)
	ret := C.cgo_callfn_GDExtensionSpxAudioIsMusicPlaying(arg0,)
	return (GdBool)(ret)
}
func CallAudioPlayMusic(
	path GdString,
	)  {
	arg0 := (C.GDExtensionSpxAudioPlayMusic)(api.SpxAudioPlayMusic)
	arg1 := (C.GdString)(path)
	C.cgo_callfn_GDExtensionSpxAudioPlayMusic(arg0,arg1,)
	
}
func CallAudioSetMusicVolume(
	volume GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetMusicVolume)(api.SpxAudioSetMusicVolume)
	arg1 := (C.GdFloat)(volume)
	C.cgo_callfn_GDExtensionSpxAudioSetMusicVolume(arg0,arg1,)
	
}
func CallAudioGetMusicVolume(
	) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetMusicVolume)(api.SpxAudioGetMusicVolume)
	ret := C.cgo_callfn_GDExtensionSpxAudioGetMusicVolume(arg0,)
	return (GdFloat)(ret)
}
func CallAudioPauseMusic(
	)  {
	arg0 := (C.GDExtensionSpxAudioPauseMusic)(api.SpxAudioPauseMusic)
	C.cgo_callfn_GDExtensionSpxAudioPauseMusic(arg0,)
}
func CallAudioResumeMusic(
	)  {
	arg0 := (C.GDExtensionSpxAudioResumeMusic)(api.SpxAudioResumeMusic)
	C.cgo_callfn_GDExtensionSpxAudioResumeMusic(arg0,)
}
func CallAudioGetMusicTimer(
	) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetMusicTimer)(api.SpxAudioGetMusicTimer)
	ret := C.cgo_callfn_GDExtensionSpxAudioGetMusicTimer(arg0,)
	return (GdFloat)(ret)
}
func CallAudioSetMusicTimer(
	time GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetMusicTimer)(api.SpxAudioSetMusicTimer)
	arg1 := (C.GdFloat)(time)
	C.cgo_callfn_GDExtensionSpxAudioSetMusicTimer(arg0,arg1,)
	
}
func CallInputGetMousePos(
	) GdVec2 {
	arg0 := (C.GDExtensionSpxInputGetMousePos)(api.SpxInputGetMousePos)
	ret := C.cgo_callfn_GDExtensionSpxInputGetMousePos(arg0,)
	return (GdVec2)(ret)
}
func CallInputGetMouseState(
	mouse_id GdInt,
	) GdBool {
	arg0 := (C.GDExtensionSpxInputGetMouseState)(api.SpxInputGetMouseState)
	arg1 := (C.GdInt)(mouse_id)
	ret := C.cgo_callfn_GDExtensionSpxInputGetMouseState(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallInputGetKeyState(
	key GdInt,
	) GdInt {
	arg0 := (C.GDExtensionSpxInputGetKeyState)(api.SpxInputGetKeyState)
	arg1 := (C.GdInt)(key)
	ret := C.cgo_callfn_GDExtensionSpxInputGetKeyState(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallInputGetAxis(
	axis GdString,
	) GdFloat {
	arg0 := (C.GDExtensionSpxInputGetAxis)(api.SpxInputGetAxis)
	arg1 := (C.GdString)(axis)
	ret := C.cgo_callfn_GDExtensionSpxInputGetAxis(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallInputIsActionPressed(
	action GdString,
	) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionPressed)(api.SpxInputIsActionPressed)
	arg1 := (C.GdString)(action)
	ret := C.cgo_callfn_GDExtensionSpxInputIsActionPressed(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallInputIsActionJustPressed(
	action GdString,
	) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionJustPressed)(api.SpxInputIsActionJustPressed)
	arg1 := (C.GdString)(action)
	ret := C.cgo_callfn_GDExtensionSpxInputIsActionJustPressed(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallInputIsActionJustReleased(
	action GdString,
	) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionJustReleased)(api.SpxInputIsActionJustReleased)
	arg1 := (C.GdString)(action)
	ret := C.cgo_callfn_GDExtensionSpxInputIsActionJustReleased(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallPhysicSetGravity(
	gravity GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetGravity)(api.SpxPhysicSetGravity)
	arg1 := (C.GdFloat)(gravity)
	C.cgo_callfn_GDExtensionSpxPhysicSetGravity(arg0,arg1,)
	
}
func CallPhysicGetGravity(
	) GdFloat {
	arg0 := (C.GDExtensionSpxPhysicGetGravity)(api.SpxPhysicGetGravity)
	ret := C.cgo_callfn_GDExtensionSpxPhysicGetGravity(arg0,)
	return (GdFloat)(ret)
}
func CallPhysicSetVelocity(
	obj GdObj,
	velocity GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetVelocity)(api.SpxPhysicSetVelocity)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(velocity)
	C.cgo_callfn_GDExtensionSpxPhysicSetVelocity(arg0,arg1,arg2,)
	
	
}
func CallPhysicGetVelocity(
	obj GdObj,
	) GdVec2 {
	arg0 := (C.GDExtensionSpxPhysicGetVelocity)(api.SpxPhysicGetVelocity)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxPhysicGetVelocity(arg0,arg1,)
	
	return (GdVec2)(ret)
}
func CallPhysicSetMass(
	obj GdObj,
	mass GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetMass)(api.SpxPhysicSetMass)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdFloat)(mass)
	C.cgo_callfn_GDExtensionSpxPhysicSetMass(arg0,arg1,arg2,)
	
	
}
func CallPhysicGetMass(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxPhysicGetMass)(api.SpxPhysicGetMass)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxPhysicGetMass(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallPhysicAddForce(
	obj GdObj,
	force GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddForce)(api.SpxPhysicAddForce)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(force)
	C.cgo_callfn_GDExtensionSpxPhysicAddForce(arg0,arg1,arg2,)
	
	
}
func CallPhysicAddImpulse(
	obj GdObj,
	impulse GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddImpulse)(api.SpxPhysicAddImpulse)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(impulse)
	C.cgo_callfn_GDExtensionSpxPhysicAddImpulse(arg0,arg1,arg2,)
	
	
}
func CallPhysicSetCollisionLayer(
	obj GdObj,
	layer GdInt,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetCollisionLayer)(api.SpxPhysicSetCollisionLayer)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(layer)
	C.cgo_callfn_GDExtensionSpxPhysicSetCollisionLayer(arg0,arg1,arg2,)
	
	
}
func CallPhysicGetCollisionLayer(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxPhysicGetCollisionLayer)(api.SpxPhysicGetCollisionLayer)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxPhysicGetCollisionLayer(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallPhysicSetCollisionMask(
	obj GdObj,
	mask GdInt,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetCollisionMask)(api.SpxPhysicSetCollisionMask)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(mask)
	C.cgo_callfn_GDExtensionSpxPhysicSetCollisionMask(arg0,arg1,arg2,)
	
	
}
func CallPhysicGetCollisionMask(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxPhysicGetCollisionMask)(api.SpxPhysicGetCollisionMask)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxPhysicGetCollisionMask(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallPhysicGetColliderType(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxPhysicGetColliderType)(api.SpxPhysicGetColliderType)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxPhysicGetColliderType(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallPhysicAddColliderRect(
	obj GdObj,
	center GdVec2,
	size GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddColliderRect)(api.SpxPhysicAddColliderRect)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdVec2)(size)
	C.cgo_callfn_GDExtensionSpxPhysicAddColliderRect(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallPhysicAddColliderCircle(
	obj GdObj,
	center GdVec2,
	radius GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddColliderCircle)(api.SpxPhysicAddColliderCircle)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdFloat)(radius)
	C.cgo_callfn_GDExtensionSpxPhysicAddColliderCircle(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallPhysicAddColliderCapsule(
	obj GdObj,
	center GdVec2,
	size GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxPhysicAddColliderCapsule)(api.SpxPhysicAddColliderCapsule)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdVec2)(size)
	C.cgo_callfn_GDExtensionSpxPhysicAddColliderCapsule(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallPhysicSetTrigger(
	obj GdObj,
	trigger GdBool,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetTrigger)(api.SpxPhysicSetTrigger)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(trigger)
	C.cgo_callfn_GDExtensionSpxPhysicSetTrigger(arg0,arg1,arg2,)
	
	
}
func CallPhysicIsTrigger(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxPhysicIsTrigger)(api.SpxPhysicIsTrigger)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxPhysicIsTrigger(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallPhysicSetCollisionEnabled(
	obj GdObj,
	enabled GdBool,
	)  {
	arg0 := (C.GDExtensionSpxPhysicSetCollisionEnabled)(api.SpxPhysicSetCollisionEnabled)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(enabled)
	C.cgo_callfn_GDExtensionSpxPhysicSetCollisionEnabled(arg0,arg1,arg2,)
	
	
}
func CallPhysicIsCollisionEnabled(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxPhysicIsCollisionEnabled)(api.SpxPhysicIsCollisionEnabled)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxPhysicIsCollisionEnabled(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteCreateSprite(
	path GdString,
	) GdObj {
	arg0 := (C.GDExtensionSpxSpriteCreateSprite)(api.SpxSpriteCreateSprite)
	arg1 := (C.GdString)(path)
	ret := C.cgo_callfn_GDExtensionSpxSpriteCreateSprite(arg0,arg1,)
	
	return (GdObj)(ret)
}
func CallSpriteCloneSprite(
	obj GdObj,
	) GdObj {
	arg0 := (C.GDExtensionSpxSpriteCloneSprite)(api.SpxSpriteCloneSprite)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteCloneSprite(arg0,arg1,)
	
	return (GdObj)(ret)
}
func CallSpriteDestroySprite(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteDestroySprite)(api.SpxSpriteDestroySprite)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteDestroySprite(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteIsSpriteAlive(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsSpriteAlive)(api.SpxSpriteIsSpriteAlive)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteIsSpriteAlive(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteSetPosition(
	obj GdObj,
	pos GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetPosition)(api.SpxSpriteSetPosition)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(pos)
	C.cgo_callfn_GDExtensionSpxSpriteSetPosition(arg0,arg1,arg2,)
	
	
}
func CallSpriteSetRotation(
	obj GdObj,
	rot GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetRotation)(api.SpxSpriteSetRotation)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdFloat)(rot)
	C.cgo_callfn_GDExtensionSpxSpriteSetRotation(arg0,arg1,arg2,)
	
	
}
func CallSpriteSetScale(
	obj GdObj,
	scale GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetScale)(api.SpxSpriteSetScale)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(scale)
	C.cgo_callfn_GDExtensionSpxSpriteSetScale(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetPosition(
	obj GdObj,
	) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetPosition)(api.SpxSpriteGetPosition)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetPosition(arg0,arg1,)
	
	return (GdVec2)(ret)
}
func CallSpriteGetRotation(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetRotation)(api.SpxSpriteGetRotation)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetRotation(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallSpriteGetScale(
	obj GdObj,
	) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetScale)(api.SpxSpriteGetScale)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetScale(arg0,arg1,)
	
	return (GdVec2)(ret)
}
func CallSpriteSetColor(
	obj GdObj,
	color GdColor,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetColor)(api.SpxSpriteSetColor)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdColor)(color)
	C.cgo_callfn_GDExtensionSpxSpriteSetColor(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetColor(
	obj GdObj,
	) GdColor {
	arg0 := (C.GDExtensionSpxSpriteGetColor)(api.SpxSpriteGetColor)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetColor(arg0,arg1,)
	
	return (GdColor)(ret)
}
func CallSpriteUpdateTexture(
	obj GdObj,
	path GdString,
	)  {
	arg0 := (C.GDExtensionSpxSpriteUpdateTexture)(api.SpxSpriteUpdateTexture)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdString)(path)
	C.cgo_callfn_GDExtensionSpxSpriteUpdateTexture(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetTexture(
	obj GdObj,
	) GdString {
	arg0 := (C.GDExtensionSpxSpriteGetTexture)(api.SpxSpriteGetTexture)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetTexture(arg0,arg1,)
	
	return (GdString)(ret)
}
func CallSpriteSetVisible(
	obj GdObj,
	visible GdBool,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetVisible)(api.SpxSpriteSetVisible)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(visible)
	C.cgo_callfn_GDExtensionSpxSpriteSetVisible(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetVisible(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteGetVisible)(api.SpxSpriteGetVisible)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetVisible(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteUpdateZIndex(
	obj GdObj,
	z GdInt,
	)  {
	arg0 := (C.GDExtensionSpxSpriteUpdateZIndex)(api.SpxSpriteUpdateZIndex)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(z)
	C.cgo_callfn_GDExtensionSpxSpriteUpdateZIndex(arg0,arg1,arg2,)
	
	
}
func CallUICreateButton(
	path GdString,
	rect GdRect2,
	text GdString,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateButton)(api.SpxUICreateButton)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdString)(text)
	ret := C.cgo_callfn_GDExtensionSpxUICreateButton(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateLabel(
	path GdString,
	rect GdRect2,
	text GdString,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateLabel)(api.SpxUICreateLabel)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdString)(text)
	ret := C.cgo_callfn_GDExtensionSpxUICreateLabel(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateImage(
	path GdString,
	rect GdRect2,
	color GdColor,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateImage)(api.SpxUICreateImage)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdColor)(color)
	ret := C.cgo_callfn_GDExtensionSpxUICreateImage(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateSlider(
	path GdString,
	rect GdRect2,
	value GdFloat,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateSlider)(api.SpxUICreateSlider)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdFloat)(value)
	ret := C.cgo_callfn_GDExtensionSpxUICreateSlider(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateToggle(
	path GdString,
	rect GdRect2,
	value GdBool,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateToggle)(api.SpxUICreateToggle)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdBool)(value)
	ret := C.cgo_callfn_GDExtensionSpxUICreateToggle(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateInput(
	path GdString,
	rect GdRect2,
	text GdString,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateInput)(api.SpxUICreateInput)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdString)(text)
	ret := C.cgo_callfn_GDExtensionSpxUICreateInput(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUIGetType(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxUIGetType)(api.SpxUIGetType)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetType(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallUISetInteractable(
	obj GdObj,
	interactable GdBool,
	)  {
	arg0 := (C.GDExtensionSpxUISetInteractable)(api.SpxUISetInteractable)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(interactable)
	C.cgo_callfn_GDExtensionSpxUISetInteractable(arg0,arg1,arg2,)
	
	
}
func CallUIGetInteractable(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxUIGetInteractable)(api.SpxUIGetInteractable)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetInteractable(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallUISetText(
	obj GdObj,
	text GdString,
	)  {
	arg0 := (C.GDExtensionSpxUISetText)(api.SpxUISetText)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdString)(text)
	C.cgo_callfn_GDExtensionSpxUISetText(arg0,arg1,arg2,)
	
	
}
func CallUIGetText(
	obj GdObj,
	) GdString {
	arg0 := (C.GDExtensionSpxUIGetText)(api.SpxUIGetText)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetText(arg0,arg1,)
	
	return (GdString)(ret)
}
func CallUISetRect(
	obj GdObj,
	rect GdRect2,
	)  {
	arg0 := (C.GDExtensionSpxUISetRect)(api.SpxUISetRect)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdRect2)(rect)
	C.cgo_callfn_GDExtensionSpxUISetRect(arg0,arg1,arg2,)
	
	
}
func CallUIGetRect(
	obj GdObj,
	) GdRect2 {
	arg0 := (C.GDExtensionSpxUIGetRect)(api.SpxUIGetRect)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetRect(arg0,arg1,)
	
	return (GdRect2)(ret)
}
func CallUISetColor(
	obj GdObj,
	color GdColor,
	)  {
	arg0 := (C.GDExtensionSpxUISetColor)(api.SpxUISetColor)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdColor)(color)
	C.cgo_callfn_GDExtensionSpxUISetColor(arg0,arg1,arg2,)
	
	
}
func CallUIGetColor(
	obj GdObj,
	) GdColor {
	arg0 := (C.GDExtensionSpxUIGetColor)(api.SpxUIGetColor)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetColor(arg0,arg1,)
	
	return (GdColor)(ret)
}
func CallUISetFontSize(
	obj GdObj,
	size GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxUISetFontSize)(api.SpxUISetFontSize)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdFloat)(size)
	C.cgo_callfn_GDExtensionSpxUISetFontSize(arg0,arg1,arg2,)
	
	
}
func CallUIGetFontSize(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxUIGetFontSize)(api.SpxUIGetFontSize)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetFontSize(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallUISetVisible(
	obj GdObj,
	visible GdBool,
	)  {
	arg0 := (C.GDExtensionSpxUISetVisible)(api.SpxUISetVisible)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(visible)
	C.cgo_callfn_GDExtensionSpxUISetVisible(arg0,arg1,arg2,)
	
	
}
func CallUIGetVisible(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxUIGetVisible)(api.SpxUIGetVisible)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetVisible(arg0,arg1,)
	
	return (GdBool)(ret)
}