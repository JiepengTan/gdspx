/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
package ffi

//revive:disable

// #include "gdextension_spx_codegen_header.h"
// #include "ffi_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"unsafe"
)

// C type aliases
// enums


// C function aliases
type GDExtensionSpxGlobalRegisterCallbacks C.GDExtensionSpxGlobalRegisterCallbacks
type GDExtensionSpxCallbackOnEngineStart C.GDExtensionSpxCallbackOnEngineStart
type GDExtensionSpxCallbackOnEngineUpdate C.GDExtensionSpxCallbackOnEngineUpdate
type GDExtensionSpxCallbackOnEngineDestroy C.GDExtensionSpxCallbackOnEngineDestroy
type GDExtensionSpxCallbackOnSpriteReady C.GDExtensionSpxCallbackOnSpriteReady
type GDExtensionSpxCallbackOnSpriteUpdated C.GDExtensionSpxCallbackOnSpriteUpdated
type GDExtensionSpxCallbackOnSpriteDestroyed C.GDExtensionSpxCallbackOnSpriteDestroyed
type GDExtensionSpxCallbackOnMousePressed C.GDExtensionSpxCallbackOnMousePressed
type GDExtensionSpxCallbackOnMouseReleased C.GDExtensionSpxCallbackOnMouseReleased
type GDExtensionSpxCallbackOnKeyPressed C.GDExtensionSpxCallbackOnKeyPressed
type GDExtensionSpxCallbackOnKeyReleased C.GDExtensionSpxCallbackOnKeyReleased
type GDExtensionSpxCallbackOnActionPressed C.GDExtensionSpxCallbackOnActionPressed
type GDExtensionSpxCallbackOnActionJustPressed C.GDExtensionSpxCallbackOnActionJustPressed
type GDExtensionSpxCallbackOnActionJustReleased C.GDExtensionSpxCallbackOnActionJustReleased
type GDExtensionSpxCallbackOnAxisChanged C.GDExtensionSpxCallbackOnAxisChanged
type GDExtensionSpxCallbackOnCollisionEnter C.GDExtensionSpxCallbackOnCollisionEnter
type GDExtensionSpxCallbackOnCollisionStay C.GDExtensionSpxCallbackOnCollisionStay
type GDExtensionSpxCallbackOnCollisionExit C.GDExtensionSpxCallbackOnCollisionExit
type GDExtensionSpxCallbackOnTriggerEnter C.GDExtensionSpxCallbackOnTriggerEnter
type GDExtensionSpxCallbackOnTriggerStay C.GDExtensionSpxCallbackOnTriggerStay
type GDExtensionSpxCallbackOnTriggerExit C.GDExtensionSpxCallbackOnTriggerExit
type GDExtensionSpxCallbackOnUIPressed C.GDExtensionSpxCallbackOnUIPressed
type GDExtensionSpxCallbackOnUIReleased C.GDExtensionSpxCallbackOnUIReleased
type GDExtensionSpxCallbackOnUIHovered C.GDExtensionSpxCallbackOnUIHovered
type GDExtensionSpxCallbackOnUIClicked C.GDExtensionSpxCallbackOnUIClicked
type GDExtensionSpxCallbackOnUIToggle C.GDExtensionSpxCallbackOnUIToggle
type GDExtensionSpxCallbackOnUITextChanged C.GDExtensionSpxCallbackOnUITextChanged
type GDExtensionSpxStringNewWithLatin1Chars C.GDExtensionSpxStringNewWithLatin1Chars
type GDExtensionSpxStringNewWithUtf8Chars C.GDExtensionSpxStringNewWithUtf8Chars
type GDExtensionSpxStringNewWithLatin1CharsAndLen C.GDExtensionSpxStringNewWithLatin1CharsAndLen
type GDExtensionSpxStringNewWithUtf8CharsAndLen C.GDExtensionSpxStringNewWithUtf8CharsAndLen
type GDExtensionSpxStringToLatin1Chars C.GDExtensionSpxStringToLatin1Chars
type GDExtensionSpxStringToUtf8Chars C.GDExtensionSpxStringToUtf8Chars
type GDExtensionSpxVariantGetPtrConstructor C.GDExtensionSpxVariantGetPtrConstructor
type GDExtensionSpxVariantGetPtrDestructor C.GDExtensionSpxVariantGetPtrDestructor
type GDExtensionSpxAudioPlayAudio C.GDExtensionSpxAudioPlayAudio
type GDExtensionSpxAudioSetAudioVolume C.GDExtensionSpxAudioSetAudioVolume
type GDExtensionSpxAudioGetAudioVolume C.GDExtensionSpxAudioGetAudioVolume
type GDExtensionSpxAudioIsMusicPlaying C.GDExtensionSpxAudioIsMusicPlaying
type GDExtensionSpxAudioPlayMusic C.GDExtensionSpxAudioPlayMusic
type GDExtensionSpxAudioSetMusicVolume C.GDExtensionSpxAudioSetMusicVolume
type GDExtensionSpxAudioGetMusicVolume C.GDExtensionSpxAudioGetMusicVolume
type GDExtensionSpxAudioPauseMusic C.GDExtensionSpxAudioPauseMusic
type GDExtensionSpxAudioResumeMusic C.GDExtensionSpxAudioResumeMusic
type GDExtensionSpxAudioGetMusicTimer C.GDExtensionSpxAudioGetMusicTimer
type GDExtensionSpxAudioSetMusicTimer C.GDExtensionSpxAudioSetMusicTimer
type GDExtensionSpxInputGetMousePos C.GDExtensionSpxInputGetMousePos
type GDExtensionSpxInputGetMouseState C.GDExtensionSpxInputGetMouseState
type GDExtensionSpxInputGetKeyState C.GDExtensionSpxInputGetKeyState
type GDExtensionSpxInputGetAxis C.GDExtensionSpxInputGetAxis
type GDExtensionSpxInputIsActionPressed C.GDExtensionSpxInputIsActionPressed
type GDExtensionSpxInputIsActionJustPressed C.GDExtensionSpxInputIsActionJustPressed
type GDExtensionSpxInputIsActionJustReleased C.GDExtensionSpxInputIsActionJustReleased
type GDExtensionSpxPhysicRaycast C.GDExtensionSpxPhysicRaycast
type GDExtensionSpxSpriteCreateSprite C.GDExtensionSpxSpriteCreateSprite
type GDExtensionSpxSpriteCloneSprite C.GDExtensionSpxSpriteCloneSprite
type GDExtensionSpxSpriteDestroySprite C.GDExtensionSpxSpriteDestroySprite
type GDExtensionSpxSpriteIsSpriteAlive C.GDExtensionSpxSpriteIsSpriteAlive
type GDExtensionSpxSpriteSetPosition C.GDExtensionSpxSpriteSetPosition
type GDExtensionSpxSpriteSetRotation C.GDExtensionSpxSpriteSetRotation
type GDExtensionSpxSpriteSetScale C.GDExtensionSpxSpriteSetScale
type GDExtensionSpxSpriteGetPosition C.GDExtensionSpxSpriteGetPosition
type GDExtensionSpxSpriteGetRotation C.GDExtensionSpxSpriteGetRotation
type GDExtensionSpxSpriteGetScale C.GDExtensionSpxSpriteGetScale
type GDExtensionSpxSpriteSetColor C.GDExtensionSpxSpriteSetColor
type GDExtensionSpxSpriteGetColor C.GDExtensionSpxSpriteGetColor
type GDExtensionSpxSpriteSetTexture C.GDExtensionSpxSpriteSetTexture
type GDExtensionSpxSpriteGetTexture C.GDExtensionSpxSpriteGetTexture
type GDExtensionSpxSpriteSetVisible C.GDExtensionSpxSpriteSetVisible
type GDExtensionSpxSpriteGetVisible C.GDExtensionSpxSpriteGetVisible
type GDExtensionSpxSpriteGetZIndex C.GDExtensionSpxSpriteGetZIndex
type GDExtensionSpxSpriteSetZIndex C.GDExtensionSpxSpriteSetZIndex
type GDExtensionSpxSpritePlayAnim C.GDExtensionSpxSpritePlayAnim
type GDExtensionSpxSpritePlayBackwardsAnim C.GDExtensionSpxSpritePlayBackwardsAnim
type GDExtensionSpxSpritePauseAnim C.GDExtensionSpxSpritePauseAnim
type GDExtensionSpxSpriteStopAnim C.GDExtensionSpxSpriteStopAnim
type GDExtensionSpxSpriteIsPlayingAnim C.GDExtensionSpxSpriteIsPlayingAnim
type GDExtensionSpxSpriteSetAnim C.GDExtensionSpxSpriteSetAnim
type GDExtensionSpxSpriteGetAnim C.GDExtensionSpxSpriteGetAnim
type GDExtensionSpxSpriteSetAnimFrame C.GDExtensionSpxSpriteSetAnimFrame
type GDExtensionSpxSpriteGetAnimFrame C.GDExtensionSpxSpriteGetAnimFrame
type GDExtensionSpxSpriteSetAnimSpeedScale C.GDExtensionSpxSpriteSetAnimSpeedScale
type GDExtensionSpxSpriteGetAnimSpeedScale C.GDExtensionSpxSpriteGetAnimSpeedScale
type GDExtensionSpxSpriteGetAnimPlayingSpeed C.GDExtensionSpxSpriteGetAnimPlayingSpeed
type GDExtensionSpxSpriteSetAnimCentered C.GDExtensionSpxSpriteSetAnimCentered
type GDExtensionSpxSpriteIsAnimCentered C.GDExtensionSpxSpriteIsAnimCentered
type GDExtensionSpxSpriteSetAnimOffset C.GDExtensionSpxSpriteSetAnimOffset
type GDExtensionSpxSpriteGetAnimOffset C.GDExtensionSpxSpriteGetAnimOffset
type GDExtensionSpxSpriteSetAnimFlipH C.GDExtensionSpxSpriteSetAnimFlipH
type GDExtensionSpxSpriteIsAnimFlippedH C.GDExtensionSpxSpriteIsAnimFlippedH
type GDExtensionSpxSpriteSetAnimFlipV C.GDExtensionSpxSpriteSetAnimFlipV
type GDExtensionSpxSpriteIsAnimFlippedV C.GDExtensionSpxSpriteIsAnimFlippedV
type GDExtensionSpxSpriteSetGravity C.GDExtensionSpxSpriteSetGravity
type GDExtensionSpxSpriteGetGravity C.GDExtensionSpxSpriteGetGravity
type GDExtensionSpxSpriteSetMass C.GDExtensionSpxSpriteSetMass
type GDExtensionSpxSpriteGetMass C.GDExtensionSpxSpriteGetMass
type GDExtensionSpxSpriteAddForce C.GDExtensionSpxSpriteAddForce
type GDExtensionSpxSpriteAddImpulse C.GDExtensionSpxSpriteAddImpulse
type GDExtensionSpxSpriteSetCollisionLayer C.GDExtensionSpxSpriteSetCollisionLayer
type GDExtensionSpxSpriteGetCollisionLayer C.GDExtensionSpxSpriteGetCollisionLayer
type GDExtensionSpxSpriteSetCollisionMask C.GDExtensionSpxSpriteSetCollisionMask
type GDExtensionSpxSpriteGetCollisionMask C.GDExtensionSpxSpriteGetCollisionMask
type GDExtensionSpxSpriteSetTriggerLayer C.GDExtensionSpxSpriteSetTriggerLayer
type GDExtensionSpxSpriteGetTriggerLayer C.GDExtensionSpxSpriteGetTriggerLayer
type GDExtensionSpxSpriteSetTriggerMask C.GDExtensionSpxSpriteSetTriggerMask
type GDExtensionSpxSpriteGetTriggerMask C.GDExtensionSpxSpriteGetTriggerMask
type GDExtensionSpxSpriteSetColliderRect C.GDExtensionSpxSpriteSetColliderRect
type GDExtensionSpxSpriteSetColliderCircle C.GDExtensionSpxSpriteSetColliderCircle
type GDExtensionSpxSpriteSetColliderCapsule C.GDExtensionSpxSpriteSetColliderCapsule
type GDExtensionSpxSpriteSetCollisionEnabled C.GDExtensionSpxSpriteSetCollisionEnabled
type GDExtensionSpxSpriteIsCollisionEnabled C.GDExtensionSpxSpriteIsCollisionEnabled
type GDExtensionSpxSpriteSetTriggerRect C.GDExtensionSpxSpriteSetTriggerRect
type GDExtensionSpxSpriteSetTriggerCircle C.GDExtensionSpxSpriteSetTriggerCircle
type GDExtensionSpxSpriteSetTriggerCapsule C.GDExtensionSpxSpriteSetTriggerCapsule
type GDExtensionSpxSpriteSetTriggerEnabled C.GDExtensionSpxSpriteSetTriggerEnabled
type GDExtensionSpxSpriteIsTriggerEnabled C.GDExtensionSpxSpriteIsTriggerEnabled
type GDExtensionSpxUICreateButton C.GDExtensionSpxUICreateButton
type GDExtensionSpxUICreateLabel C.GDExtensionSpxUICreateLabel
type GDExtensionSpxUICreateImage C.GDExtensionSpxUICreateImage
type GDExtensionSpxUICreateSlider C.GDExtensionSpxUICreateSlider
type GDExtensionSpxUICreateToggle C.GDExtensionSpxUICreateToggle
type GDExtensionSpxUICreateInput C.GDExtensionSpxUICreateInput
type GDExtensionSpxUIGetType C.GDExtensionSpxUIGetType
type GDExtensionSpxUISetInteractable C.GDExtensionSpxUISetInteractable
type GDExtensionSpxUIGetInteractable C.GDExtensionSpxUIGetInteractable
type GDExtensionSpxUISetText C.GDExtensionSpxUISetText
type GDExtensionSpxUIGetText C.GDExtensionSpxUIGetText
type GDExtensionSpxUISetRect C.GDExtensionSpxUISetRect
type GDExtensionSpxUIGetRect C.GDExtensionSpxUIGetRect
type GDExtensionSpxUISetColor C.GDExtensionSpxUISetColor
type GDExtensionSpxUIGetColor C.GDExtensionSpxUIGetColor
type GDExtensionSpxUISetFontSize C.GDExtensionSpxUISetFontSize
type GDExtensionSpxUIGetFontSize C.GDExtensionSpxUIGetFontSize
type GDExtensionSpxUISetVisible C.GDExtensionSpxUISetVisible
type GDExtensionSpxUIGetVisible C.GDExtensionSpxUIGetVisible


// call gdextension interface functions
func CallGlobalRegisterCallbacks(
	callback_ptr GDExtensionSpxCallbackInfoPtr,
	)  {
	arg0 := (C.GDExtensionSpxGlobalRegisterCallbacks)(api.SpxGlobalRegisterCallbacks)
	arg1 := (C.GDExtensionSpxCallbackInfoPtr)(callback_ptr)
	C.cgo_callfn_GDExtensionSpxGlobalRegisterCallbacks(arg0,arg1,)
	
}
func CallStringNewWithLatin1Chars(
	r_dest GDExtensionUninitializedStringPtr,
	p_contents string,
	)  {
	arg0 := (C.GDExtensionSpxStringNewWithLatin1Chars)(api.SpxStringNewWithLatin1Chars)
	arg1 := (C.GDExtensionUninitializedStringPtr)(r_dest)
	arg2 := C.CString(p_contents)
	C.cgo_callfn_GDExtensionSpxStringNewWithLatin1Chars(arg0,arg1,arg2,)
	C.free(unsafe.Pointer(arg2))
	
}
func CallStringNewWithUtf8Chars(
	r_dest GDExtensionUninitializedStringPtr,
	p_contents string,
	)  {
	arg0 := (C.GDExtensionSpxStringNewWithUtf8Chars)(api.SpxStringNewWithUtf8Chars)
	arg1 := (C.GDExtensionUninitializedStringPtr)(r_dest)
	arg2 := C.CString(p_contents)
	C.cgo_callfn_GDExtensionSpxStringNewWithUtf8Chars(arg0,arg1,arg2,)
	C.free(unsafe.Pointer(arg2))
	
}
func CallStringNewWithLatin1CharsAndLen(
	r_dest GDExtensionUninitializedStringPtr,
	p_contents string,
	p_size GdInt,
	)  {
	arg0 := (C.GDExtensionSpxStringNewWithLatin1CharsAndLen)(api.SpxStringNewWithLatin1CharsAndLen)
	arg1 := (C.GDExtensionUninitializedStringPtr)(r_dest)
	arg2 := C.CString(p_contents)
	arg3 := (C.GdInt)(p_size)
	C.cgo_callfn_GDExtensionSpxStringNewWithLatin1CharsAndLen(arg0,arg1,arg2,arg3,)
	C.free(unsafe.Pointer(arg2))
	
	
}
func CallStringNewWithUtf8CharsAndLen(
	r_dest GDExtensionUninitializedStringPtr,
	p_contents string,
	p_size GdInt,
	)  {
	arg0 := (C.GDExtensionSpxStringNewWithUtf8CharsAndLen)(api.SpxStringNewWithUtf8CharsAndLen)
	arg1 := (C.GDExtensionUninitializedStringPtr)(r_dest)
	arg2 := C.CString(p_contents)
	arg3 := (C.GdInt)(p_size)
	C.cgo_callfn_GDExtensionSpxStringNewWithUtf8CharsAndLen(arg0,arg1,arg2,arg3,)
	C.free(unsafe.Pointer(arg2))
	
	
}
func CallStringToLatin1Chars(
	p_self GDExtensionConstStringPtr,
	r_text *Char,
	p_max_write_length GdInt,
	) GdInt {
	arg0 := (C.GDExtensionSpxStringToLatin1Chars)(api.SpxStringToLatin1Chars)
	arg1 := (C.GDExtensionConstStringPtr)(p_self)
	arg2 := (*C.char)(r_text)
	arg3 := (C.GdInt)(p_max_write_length)
	ret := C.cgo_callfn_GDExtensionSpxStringToLatin1Chars(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallStringToUtf8Chars(
	p_self GDExtensionConstStringPtr,
	r_text *Char,
	p_max_write_length GdInt,
	) GdInt {
	arg0 := (C.GDExtensionSpxStringToUtf8Chars)(api.SpxStringToUtf8Chars)
	arg1 := (C.GDExtensionConstStringPtr)(p_self)
	arg2 := (*C.char)(r_text)
	arg3 := (C.GdInt)(p_max_write_length)
	ret := C.cgo_callfn_GDExtensionSpxStringToUtf8Chars(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallVariantGetPtrConstructor(
	p_type GDExtensionVariantType,
	p_constructor int32,
	) GDExtensionPtrConstructor {
	arg0 := (C.GDExtensionSpxVariantGetPtrConstructor)(api.SpxVariantGetPtrConstructor)
	arg1 := (C.GDExtensionVariantType)(p_type)
	arg2 := (C.int32_t)(p_constructor)
	ret := C.cgo_callfn_GDExtensionSpxVariantGetPtrConstructor(arg0,arg1,arg2,)
	
	
	return (GDExtensionPtrConstructor)(ret)
}
func CallVariantGetPtrDestructor(
	p_type GDExtensionVariantType,
	) GDExtensionPtrDestructor {
	arg0 := (C.GDExtensionSpxVariantGetPtrDestructor)(api.SpxVariantGetPtrDestructor)
	arg1 := (C.GDExtensionVariantType)(p_type)
	ret := C.cgo_callfn_GDExtensionSpxVariantGetPtrDestructor(arg0,arg1,)
	
	return (GDExtensionPtrDestructor)(ret)
}
func CallAudioPlayAudio(
	path GdString,
	)  {
	arg0 := (C.GDExtensionSpxAudioPlayAudio)(api.SpxAudioPlayAudio)
	arg1 := (C.GdString)(path)
	C.cgo_callfn_GDExtensionSpxAudioPlayAudio(arg0,arg1,)
	
}
func CallAudioSetAudioVolume(
	volume GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetAudioVolume)(api.SpxAudioSetAudioVolume)
	arg1 := (C.GdFloat)(volume)
	C.cgo_callfn_GDExtensionSpxAudioSetAudioVolume(arg0,arg1,)
	
}
func CallAudioGetAudioVolume(
	) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetAudioVolume)(api.SpxAudioGetAudioVolume)
	ret := C.cgo_callfn_GDExtensionSpxAudioGetAudioVolume(arg0,)
	return (GdFloat)(ret)
}
func CallAudioIsMusicPlaying(
	) GdBool {
	arg0 := (C.GDExtensionSpxAudioIsMusicPlaying)(api.SpxAudioIsMusicPlaying)
	ret := C.cgo_callfn_GDExtensionSpxAudioIsMusicPlaying(arg0,)
	return (GdBool)(ret)
}
func CallAudioPlayMusic(
	path GdString,
	)  {
	arg0 := (C.GDExtensionSpxAudioPlayMusic)(api.SpxAudioPlayMusic)
	arg1 := (C.GdString)(path)
	C.cgo_callfn_GDExtensionSpxAudioPlayMusic(arg0,arg1,)
	
}
func CallAudioSetMusicVolume(
	volume GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetMusicVolume)(api.SpxAudioSetMusicVolume)
	arg1 := (C.GdFloat)(volume)
	C.cgo_callfn_GDExtensionSpxAudioSetMusicVolume(arg0,arg1,)
	
}
func CallAudioGetMusicVolume(
	) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetMusicVolume)(api.SpxAudioGetMusicVolume)
	ret := C.cgo_callfn_GDExtensionSpxAudioGetMusicVolume(arg0,)
	return (GdFloat)(ret)
}
func CallAudioPauseMusic(
	)  {
	arg0 := (C.GDExtensionSpxAudioPauseMusic)(api.SpxAudioPauseMusic)
	C.cgo_callfn_GDExtensionSpxAudioPauseMusic(arg0,)
}
func CallAudioResumeMusic(
	)  {
	arg0 := (C.GDExtensionSpxAudioResumeMusic)(api.SpxAudioResumeMusic)
	C.cgo_callfn_GDExtensionSpxAudioResumeMusic(arg0,)
}
func CallAudioGetMusicTimer(
	) GdFloat {
	arg0 := (C.GDExtensionSpxAudioGetMusicTimer)(api.SpxAudioGetMusicTimer)
	ret := C.cgo_callfn_GDExtensionSpxAudioGetMusicTimer(arg0,)
	return (GdFloat)(ret)
}
func CallAudioSetMusicTimer(
	time GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxAudioSetMusicTimer)(api.SpxAudioSetMusicTimer)
	arg1 := (C.GdFloat)(time)
	C.cgo_callfn_GDExtensionSpxAudioSetMusicTimer(arg0,arg1,)
	
}
func CallInputGetMousePos(
	) GdVec2 {
	arg0 := (C.GDExtensionSpxInputGetMousePos)(api.SpxInputGetMousePos)
	ret := C.cgo_callfn_GDExtensionSpxInputGetMousePos(arg0,)
	return (GdVec2)(ret)
}
func CallInputGetMouseState(
	mouse_id GdInt,
	) GdBool {
	arg0 := (C.GDExtensionSpxInputGetMouseState)(api.SpxInputGetMouseState)
	arg1 := (C.GdInt)(mouse_id)
	ret := C.cgo_callfn_GDExtensionSpxInputGetMouseState(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallInputGetKeyState(
	key GdInt,
	) GdInt {
	arg0 := (C.GDExtensionSpxInputGetKeyState)(api.SpxInputGetKeyState)
	arg1 := (C.GdInt)(key)
	ret := C.cgo_callfn_GDExtensionSpxInputGetKeyState(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallInputGetAxis(
	axis GdString,
	) GdFloat {
	arg0 := (C.GDExtensionSpxInputGetAxis)(api.SpxInputGetAxis)
	arg1 := (C.GdString)(axis)
	ret := C.cgo_callfn_GDExtensionSpxInputGetAxis(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallInputIsActionPressed(
	action GdString,
	) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionPressed)(api.SpxInputIsActionPressed)
	arg1 := (C.GdString)(action)
	ret := C.cgo_callfn_GDExtensionSpxInputIsActionPressed(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallInputIsActionJustPressed(
	action GdString,
	) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionJustPressed)(api.SpxInputIsActionJustPressed)
	arg1 := (C.GdString)(action)
	ret := C.cgo_callfn_GDExtensionSpxInputIsActionJustPressed(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallInputIsActionJustReleased(
	action GdString,
	) GdBool {
	arg0 := (C.GDExtensionSpxInputIsActionJustReleased)(api.SpxInputIsActionJustReleased)
	arg1 := (C.GdString)(action)
	ret := C.cgo_callfn_GDExtensionSpxInputIsActionJustReleased(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallPhysicRaycast(
	from GdVec2,
	to GdVec2,
	collision_mask GdInt,
	) GdObj {
	arg0 := (C.GDExtensionSpxPhysicRaycast)(api.SpxPhysicRaycast)
	arg1 := (C.GdVec2)(from)
	arg2 := (C.GdVec2)(to)
	arg3 := (C.GdInt)(collision_mask)
	ret := C.cgo_callfn_GDExtensionSpxPhysicRaycast(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdObj)(ret)
}
func CallSpriteCreateSprite(
	path GdString,
	) GdObj {
	arg0 := (C.GDExtensionSpxSpriteCreateSprite)(api.SpxSpriteCreateSprite)
	arg1 := (C.GdString)(path)
	ret := C.cgo_callfn_GDExtensionSpxSpriteCreateSprite(arg0,arg1,)
	
	return (GdObj)(ret)
}
func CallSpriteCloneSprite(
	obj GdObj,
	) GdObj {
	arg0 := (C.GDExtensionSpxSpriteCloneSprite)(api.SpxSpriteCloneSprite)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteCloneSprite(arg0,arg1,)
	
	return (GdObj)(ret)
}
func CallSpriteDestroySprite(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteDestroySprite)(api.SpxSpriteDestroySprite)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteDestroySprite(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteIsSpriteAlive(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsSpriteAlive)(api.SpxSpriteIsSpriteAlive)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteIsSpriteAlive(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteSetPosition(
	obj GdObj,
	pos GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetPosition)(api.SpxSpriteSetPosition)
	arg1GdObj = (C.GdObj)(obj)
	arg2GdVec2 = (C.GdVec2)(pos)
	println("arg2GdVec2 ",arg2GdVec2.X,arg2GdVec2.Y)
	C.cgo_callfn_GDExtensionSpxSpriteSetPosition(arg0,arg1GdObj,arg2GdVec2,)
	
}
func CallSpriteSetRotation(
	obj GdObj,
	rot GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetRotation)(api.SpxSpriteSetRotation)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdFloat)(rot)
	C.cgo_callfn_GDExtensionSpxSpriteSetRotation(arg0,arg1,arg2,)
	
	
}
func CallSpriteSetScale(
	obj GdObj,
	scale GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetScale)(api.SpxSpriteSetScale)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(scale)
	C.cgo_callfn_GDExtensionSpxSpriteSetScale(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetPosition(
	obj GdObj,
	) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetPosition)(api.SpxSpriteGetPosition)
	arg1 := (C.GdObj)(obj)
	var  ret C.GdVec2
	C.cgo_callfn_GDExtensionSpxSpriteGetPosition(arg0,arg1,&ret)
	return (GdVec2)(ret)
}
func CallSpriteGetRotation(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetRotation)(api.SpxSpriteGetRotation)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetRotation(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallSpriteGetScale(
	obj GdObj,
	) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetScale)(api.SpxSpriteGetScale)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetScale(arg0,arg1,)
	
	return (GdVec2)(ret)
}
func CallSpriteSetColor(
	obj GdObj,
	color GdColor,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetColor)(api.SpxSpriteSetColor)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdColor)(color)
	C.cgo_callfn_GDExtensionSpxSpriteSetColor(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetColor(
	obj GdObj,
	) GdColor {
	arg0 := (C.GDExtensionSpxSpriteGetColor)(api.SpxSpriteGetColor)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetColor(arg0,arg1,)
	
	return (GdColor)(ret)
}
func CallSpriteSetTexture(
	obj GdObj,
	path GdString,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetTexture)(api.SpxSpriteSetTexture)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdString)(path)
	C.cgo_callfn_GDExtensionSpxSpriteSetTexture(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetTexture(
	obj GdObj,
	) GdString {
	arg0 := (C.GDExtensionSpxSpriteGetTexture)(api.SpxSpriteGetTexture)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetTexture(arg0,arg1,)
	
	return (GdString)(ret)
}
func CallSpriteSetVisible(
	obj GdObj,
	visible GdBool,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetVisible)(api.SpxSpriteSetVisible)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(visible)
	C.cgo_callfn_GDExtensionSpxSpriteSetVisible(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetVisible(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteGetVisible)(api.SpxSpriteGetVisible)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetVisible(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteGetZIndex(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetZIndex)(api.SpxSpriteGetZIndex)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetZIndex(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallSpriteSetZIndex(
	obj GdObj,
	z GdInt,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetZIndex)(api.SpxSpriteSetZIndex)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(z)
	C.cgo_callfn_GDExtensionSpxSpriteSetZIndex(arg0,arg1,arg2,)
	
	
}
func CallSpritePlayAnim(
	obj GdObj,
	p_name GdString,
	p_custom_scale GdFloat,
	p_from_end GdBool,
	)  {
	arg0 := (C.GDExtensionSpxSpritePlayAnim)(api.SpxSpritePlayAnim)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdString)(p_name)
	arg3 := (C.GdFloat)(p_custom_scale)
	arg4 := (C.GdBool)(p_from_end)
	C.cgo_callfn_GDExtensionSpxSpritePlayAnim(arg0,arg1,arg2,arg3,arg4,)
	
	
	
	
}
func CallSpritePlayBackwardsAnim(
	obj GdObj,
	p_name GdString,
	)  {
	arg0 := (C.GDExtensionSpxSpritePlayBackwardsAnim)(api.SpxSpritePlayBackwardsAnim)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdString)(p_name)
	C.cgo_callfn_GDExtensionSpxSpritePlayBackwardsAnim(arg0,arg1,arg2,)
	
	
}
func CallSpritePauseAnim(
	obj GdObj,
	)  {
	arg0 := (C.GDExtensionSpxSpritePauseAnim)(api.SpxSpritePauseAnim)
	arg1 := (C.GdObj)(obj)
	C.cgo_callfn_GDExtensionSpxSpritePauseAnim(arg0,arg1,)
	
}
func CallSpriteStopAnim(
	obj GdObj,
	)  {
	arg0 := (C.GDExtensionSpxSpriteStopAnim)(api.SpxSpriteStopAnim)
	arg1 := (C.GdObj)(obj)
	C.cgo_callfn_GDExtensionSpxSpriteStopAnim(arg0,arg1,)
	
}
func CallSpriteIsPlayingAnim(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsPlayingAnim)(api.SpxSpriteIsPlayingAnim)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteIsPlayingAnim(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteSetAnim(
	obj GdObj,
	p_name GdString,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetAnim)(api.SpxSpriteSetAnim)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdString)(p_name)
	C.cgo_callfn_GDExtensionSpxSpriteSetAnim(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetAnim(
	obj GdObj,
	) GdString {
	arg0 := (C.GDExtensionSpxSpriteGetAnim)(api.SpxSpriteGetAnim)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetAnim(arg0,arg1,)
	
	return (GdString)(ret)
}
func CallSpriteSetAnimFrame(
	obj GdObj,
	p_frame GdInt,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetAnimFrame)(api.SpxSpriteSetAnimFrame)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(p_frame)
	C.cgo_callfn_GDExtensionSpxSpriteSetAnimFrame(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetAnimFrame(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetAnimFrame)(api.SpxSpriteGetAnimFrame)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetAnimFrame(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallSpriteSetAnimSpeedScale(
	obj GdObj,
	p_speed_scale GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetAnimSpeedScale)(api.SpxSpriteSetAnimSpeedScale)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdFloat)(p_speed_scale)
	C.cgo_callfn_GDExtensionSpxSpriteSetAnimSpeedScale(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetAnimSpeedScale(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetAnimSpeedScale)(api.SpxSpriteGetAnimSpeedScale)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetAnimSpeedScale(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallSpriteGetAnimPlayingSpeed(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetAnimPlayingSpeed)(api.SpxSpriteGetAnimPlayingSpeed)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetAnimPlayingSpeed(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallSpriteSetAnimCentered(
	obj GdObj,
	p_center GdBool,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetAnimCentered)(api.SpxSpriteSetAnimCentered)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(p_center)
	C.cgo_callfn_GDExtensionSpxSpriteSetAnimCentered(arg0,arg1,arg2,)
	
	
}
func CallSpriteIsAnimCentered(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsAnimCentered)(api.SpxSpriteIsAnimCentered)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteIsAnimCentered(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteSetAnimOffset(
	obj GdObj,
	p_offset GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetAnimOffset)(api.SpxSpriteSetAnimOffset)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(p_offset)
	C.cgo_callfn_GDExtensionSpxSpriteSetAnimOffset(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetAnimOffset(
	obj GdObj,
	) GdVec2 {
	arg0 := (C.GDExtensionSpxSpriteGetAnimOffset)(api.SpxSpriteGetAnimOffset)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetAnimOffset(arg0,arg1,)
	
	return (GdVec2)(ret)
}
func CallSpriteSetAnimFlipH(
	obj GdObj,
	p_flip GdBool,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetAnimFlipH)(api.SpxSpriteSetAnimFlipH)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(p_flip)
	C.cgo_callfn_GDExtensionSpxSpriteSetAnimFlipH(arg0,arg1,arg2,)
	
	
}
func CallSpriteIsAnimFlippedH(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsAnimFlippedH)(api.SpxSpriteIsAnimFlippedH)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteIsAnimFlippedH(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteSetAnimFlipV(
	obj GdObj,
	p_flip GdBool,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetAnimFlipV)(api.SpxSpriteSetAnimFlipV)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(p_flip)
	C.cgo_callfn_GDExtensionSpxSpriteSetAnimFlipV(arg0,arg1,arg2,)
	
	
}
func CallSpriteIsAnimFlippedV(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsAnimFlippedV)(api.SpxSpriteIsAnimFlippedV)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteIsAnimFlippedV(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteSetGravity(
	obj GdObj,
	gravity GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetGravity)(api.SpxSpriteSetGravity)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdFloat)(gravity)
	C.cgo_callfn_GDExtensionSpxSpriteSetGravity(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetGravity(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetGravity)(api.SpxSpriteGetGravity)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetGravity(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallSpriteSetMass(
	obj GdObj,
	mass GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetMass)(api.SpxSpriteSetMass)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdFloat)(mass)
	C.cgo_callfn_GDExtensionSpxSpriteSetMass(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetMass(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxSpriteGetMass)(api.SpxSpriteGetMass)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetMass(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallSpriteAddForce(
	obj GdObj,
	force GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteAddForce)(api.SpxSpriteAddForce)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(force)
	C.cgo_callfn_GDExtensionSpxSpriteAddForce(arg0,arg1,arg2,)
	
	
}
func CallSpriteAddImpulse(
	obj GdObj,
	impulse GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteAddImpulse)(api.SpxSpriteAddImpulse)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(impulse)
	C.cgo_callfn_GDExtensionSpxSpriteAddImpulse(arg0,arg1,arg2,)
	
	
}
func CallSpriteSetCollisionLayer(
	obj GdObj,
	layer GdInt,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetCollisionLayer)(api.SpxSpriteSetCollisionLayer)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(layer)
	C.cgo_callfn_GDExtensionSpxSpriteSetCollisionLayer(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetCollisionLayer(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetCollisionLayer)(api.SpxSpriteGetCollisionLayer)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetCollisionLayer(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallSpriteSetCollisionMask(
	obj GdObj,
	mask GdInt,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetCollisionMask)(api.SpxSpriteSetCollisionMask)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(mask)
	C.cgo_callfn_GDExtensionSpxSpriteSetCollisionMask(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetCollisionMask(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetCollisionMask)(api.SpxSpriteGetCollisionMask)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetCollisionMask(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallSpriteSetTriggerLayer(
	obj GdObj,
	layer GdInt,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerLayer)(api.SpxSpriteSetTriggerLayer)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(layer)
	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerLayer(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetTriggerLayer(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetTriggerLayer)(api.SpxSpriteGetTriggerLayer)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetTriggerLayer(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallSpriteSetTriggerMask(
	obj GdObj,
	mask GdInt,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerMask)(api.SpxSpriteSetTriggerMask)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdInt)(mask)
	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerMask(arg0,arg1,arg2,)
	
	
}
func CallSpriteGetTriggerMask(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxSpriteGetTriggerMask)(api.SpxSpriteGetTriggerMask)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteGetTriggerMask(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallSpriteSetColliderRect(
	obj GdObj,
	center GdVec2,
	size GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetColliderRect)(api.SpxSpriteSetColliderRect)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdVec2)(size)
	C.cgo_callfn_GDExtensionSpxSpriteSetColliderRect(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallSpriteSetColliderCircle(
	obj GdObj,
	center GdVec2,
	radius GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetColliderCircle)(api.SpxSpriteSetColliderCircle)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdFloat)(radius)
	C.cgo_callfn_GDExtensionSpxSpriteSetColliderCircle(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallSpriteSetColliderCapsule(
	obj GdObj,
	center GdVec2,
	size GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetColliderCapsule)(api.SpxSpriteSetColliderCapsule)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdVec2)(size)
	C.cgo_callfn_GDExtensionSpxSpriteSetColliderCapsule(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallSpriteSetCollisionEnabled(
	obj GdObj,
	enabled GdBool,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetCollisionEnabled)(api.SpxSpriteSetCollisionEnabled)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(enabled)
	C.cgo_callfn_GDExtensionSpxSpriteSetCollisionEnabled(arg0,arg1,arg2,)
	
	
}
func CallSpriteIsCollisionEnabled(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsCollisionEnabled)(api.SpxSpriteIsCollisionEnabled)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteIsCollisionEnabled(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallSpriteSetTriggerRect(
	obj GdObj,
	center GdVec2,
	size GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerRect)(api.SpxSpriteSetTriggerRect)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdVec2)(size)
	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerRect(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallSpriteSetTriggerCircle(
	obj GdObj,
	center GdVec2,
	radius GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerCircle)(api.SpxSpriteSetTriggerCircle)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdFloat)(radius)
	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerCircle(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallSpriteSetTriggerCapsule(
	obj GdObj,
	center GdVec2,
	size GdVec2,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerCapsule)(api.SpxSpriteSetTriggerCapsule)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdVec2)(center)
	arg3 := (C.GdVec2)(size)
	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerCapsule(arg0,arg1,arg2,arg3,)
	
	
	
}
func CallSpriteSetTriggerEnabled(
	obj GdObj,
	trigger GdBool,
	)  {
	arg0 := (C.GDExtensionSpxSpriteSetTriggerEnabled)(api.SpxSpriteSetTriggerEnabled)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(trigger)
	C.cgo_callfn_GDExtensionSpxSpriteSetTriggerEnabled(arg0,arg1,arg2,)
	
	
}
func CallSpriteIsTriggerEnabled(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxSpriteIsTriggerEnabled)(api.SpxSpriteIsTriggerEnabled)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxSpriteIsTriggerEnabled(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallUICreateButton(
	path GdString,
	rect GdRect2,
	text GdString,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateButton)(api.SpxUICreateButton)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdString)(text)
	ret := C.cgo_callfn_GDExtensionSpxUICreateButton(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateLabel(
	path GdString,
	rect GdRect2,
	text GdString,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateLabel)(api.SpxUICreateLabel)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdString)(text)
	ret := C.cgo_callfn_GDExtensionSpxUICreateLabel(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateImage(
	path GdString,
	rect GdRect2,
	color GdColor,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateImage)(api.SpxUICreateImage)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdColor)(color)
	ret := C.cgo_callfn_GDExtensionSpxUICreateImage(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateSlider(
	path GdString,
	rect GdRect2,
	value GdFloat,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateSlider)(api.SpxUICreateSlider)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdFloat)(value)
	ret := C.cgo_callfn_GDExtensionSpxUICreateSlider(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateToggle(
	path GdString,
	rect GdRect2,
	value GdBool,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateToggle)(api.SpxUICreateToggle)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdBool)(value)
	ret := C.cgo_callfn_GDExtensionSpxUICreateToggle(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUICreateInput(
	path GdString,
	rect GdRect2,
	text GdString,
	) GdInt {
	arg0 := (C.GDExtensionSpxUICreateInput)(api.SpxUICreateInput)
	arg1 := (C.GdString)(path)
	arg2 := (C.GdRect2)(rect)
	arg3 := (C.GdString)(text)
	ret := C.cgo_callfn_GDExtensionSpxUICreateInput(arg0,arg1,arg2,arg3,)
	
	
	
	return (GdInt)(ret)
}
func CallUIGetType(
	obj GdObj,
	) GdInt {
	arg0 := (C.GDExtensionSpxUIGetType)(api.SpxUIGetType)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetType(arg0,arg1,)
	
	return (GdInt)(ret)
}
func CallUISetInteractable(
	obj GdObj,
	interactable GdBool,
	)  {
	arg0 := (C.GDExtensionSpxUISetInteractable)(api.SpxUISetInteractable)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(interactable)
	C.cgo_callfn_GDExtensionSpxUISetInteractable(arg0,arg1,arg2,)
	
	
}
func CallUIGetInteractable(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxUIGetInteractable)(api.SpxUIGetInteractable)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetInteractable(arg0,arg1,)
	
	return (GdBool)(ret)
}
func CallUISetText(
	obj GdObj,
	text GdString,
	)  {
	arg0 := (C.GDExtensionSpxUISetText)(api.SpxUISetText)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdString)(text)
	C.cgo_callfn_GDExtensionSpxUISetText(arg0,arg1,arg2,)
	
	
}
func CallUIGetText(
	obj GdObj,
	) GdString {
	arg0 := (C.GDExtensionSpxUIGetText)(api.SpxUIGetText)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetText(arg0,arg1,)
	
	return (GdString)(ret)
}
func CallUISetRect(
	obj GdObj,
	rect GdRect2,
	)  {
	arg0 := (C.GDExtensionSpxUISetRect)(api.SpxUISetRect)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdRect2)(rect)
	C.cgo_callfn_GDExtensionSpxUISetRect(arg0,arg1,arg2,)
	
	
}
func CallUIGetRect(
	obj GdObj,
	) GdRect2 {
	arg0 := (C.GDExtensionSpxUIGetRect)(api.SpxUIGetRect)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetRect(arg0,arg1,)
	
	return (GdRect2)(ret)
}
func CallUISetColor(
	obj GdObj,
	color GdColor,
	)  {
	arg0 := (C.GDExtensionSpxUISetColor)(api.SpxUISetColor)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdColor)(color)
	C.cgo_callfn_GDExtensionSpxUISetColor(arg0,arg1,arg2,)
	
	
}
func CallUIGetColor(
	obj GdObj,
	) GdColor {
	arg0 := (C.GDExtensionSpxUIGetColor)(api.SpxUIGetColor)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetColor(arg0,arg1,)
	
	return (GdColor)(ret)
}
func CallUISetFontSize(
	obj GdObj,
	size GdFloat,
	)  {
	arg0 := (C.GDExtensionSpxUISetFontSize)(api.SpxUISetFontSize)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdFloat)(size)
	C.cgo_callfn_GDExtensionSpxUISetFontSize(arg0,arg1,arg2,)
	
	
}
func CallUIGetFontSize(
	obj GdObj,
	) GdFloat {
	arg0 := (C.GDExtensionSpxUIGetFontSize)(api.SpxUIGetFontSize)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetFontSize(arg0,arg1,)
	
	return (GdFloat)(ret)
}
func CallUISetVisible(
	obj GdObj,
	visible GdBool,
	)  {
	arg0 := (C.GDExtensionSpxUISetVisible)(api.SpxUISetVisible)
	arg1 := (C.GdObj)(obj)
	arg2 := (C.GdBool)(visible)
	C.cgo_callfn_GDExtensionSpxUISetVisible(arg0,arg1,arg2,)
	
	
}
func CallUIGetVisible(
	obj GdObj,
	) GdBool {
	arg0 := (C.GDExtensionSpxUIGetVisible)(api.SpxUIGetVisible)
	arg1 := (C.GdObj)(obj)
	ret := C.cgo_callfn_GDExtensionSpxUIGetVisible(arg0,arg1,)
	
	return (GdBool)(ret)
}