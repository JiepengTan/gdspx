/*------------------------------------------------------------------------------
//   This code was generated by template ffi_gdextension_interface.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_gdextension_interface.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
package wrap

import (
	. "godot-ext/gdspx/internal/ffi"
	. "godot-ext/gdspx/pkg/engine"
)

type audioMgr struct {
	baseMgr
}
type inputMgr struct {
	baseMgr
}
type physicMgr struct {
	baseMgr
}
type spriteMgr struct {
	baseMgr
}
type uiMgr struct {
	baseMgr
}


func createMgrs() []IManager {
	addManager(&audioMgr{})
	addManager(&inputMgr{})
	addManager(&physicMgr{})
	addManager(&spriteMgr{})
	addManager(&uiMgr{})
	return mgrs
}

// call gdextension interface functions

func (pself *audioMgr) PlayAudio(path string) {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	CallAudioPlayAudio(arg0)
}
func (pself *audioMgr) SetAudioVolume(volume float64) {
	arg0 := ToGdFloat(volume)
	CallAudioSetAudioVolume(arg0)
}
func (pself *audioMgr) GetAudioVolume() float64  {
	retValue := CallAudioGetAudioVolume()
	return ToFloat64(retValue)
}
func (pself *audioMgr) IsMusicPlaying() bool  {
	retValue := CallAudioIsMusicPlaying()
	return ToBool(retValue)
}
func (pself *audioMgr) PlayMusic(path string) {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	CallAudioPlayMusic(arg0)
}
func (pself *audioMgr) SetMusicVolume(volume float64) {
	arg0 := ToGdFloat(volume)
	CallAudioSetMusicVolume(arg0)
}
func (pself *audioMgr) GetMusicVolume() float64  {
	retValue := CallAudioGetMusicVolume()
	return ToFloat64(retValue)
}
func (pself *audioMgr) PauseMusic() {
	CallAudioPauseMusic()
}
func (pself *audioMgr) ResumeMusic() {
	CallAudioResumeMusic()
}
func (pself *audioMgr) GetMusicTimer() float64  {
	retValue := CallAudioGetMusicTimer()
	return ToFloat64(retValue)
}
func (pself *audioMgr) SetMusicTimer(time float64) {
	arg0 := ToGdFloat(time)
	CallAudioSetMusicTimer(arg0)
}
func (pself *inputMgr) GetMousePos() Vec2  {
	retValue := CallInputGetMousePos()
	return ToVec2(retValue)
}
func (pself *inputMgr) GetMouseState(mouse_id int64) bool  {
	arg0 := ToGdInt(mouse_id)
	retValue := CallInputGetMouseState(arg0)
	return ToBool(retValue)
}
func (pself *inputMgr) GetKeyState(key int64) int64  {
	arg0 := ToGdInt(key)
	retValue := CallInputGetKeyState(arg0)
	return ToInt64(retValue)
}
func (pself *inputMgr) GetAxis(axis string) float64  {
	arg0Str := NewCString(axis)
	arg0 := arg0Str.ToGdString() 
	retValue := CallInputGetAxis(arg0)
	return ToFloat64(retValue)
}
func (pself *inputMgr) IsActionPressed(action string) bool  {
	arg0Str := NewCString(action)
	arg0 := arg0Str.ToGdString() 
	retValue := CallInputIsActionPressed(arg0)
	return ToBool(retValue)
}
func (pself *inputMgr) IsActionJustPressed(action string) bool  {
	arg0Str := NewCString(action)
	arg0 := arg0Str.ToGdString() 
	retValue := CallInputIsActionJustPressed(arg0)
	return ToBool(retValue)
}
func (pself *inputMgr) IsActionJustReleased(action string) bool  {
	arg0Str := NewCString(action)
	arg0 := arg0Str.ToGdString() 
	retValue := CallInputIsActionJustReleased(arg0)
	return ToBool(retValue)
}
func (pself *physicMgr) SetGravity(gravity float64) {
	arg0 := ToGdFloat(gravity)
	CallPhysicSetGravity(arg0)
}
func (pself *physicMgr) GetGravity() float64  {
	retValue := CallPhysicGetGravity()
	return ToFloat64(retValue)
}
func (pself *physicMgr) SetVelocity(obj Object, velocity Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(velocity)
	CallPhysicSetVelocity(arg0, arg1)
}
func (pself *physicMgr) GetVelocity(obj Object) Vec2  {
	arg0 := ToGdObj(obj)
	retValue := CallPhysicGetVelocity(arg0)
	return ToVec2(retValue)
}
func (pself *physicMgr) SetMass(obj Object, mass float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(mass)
	CallPhysicSetMass(arg0, arg1)
}
func (pself *physicMgr) GetMass(obj Object) float64  {
	arg0 := ToGdObj(obj)
	retValue := CallPhysicGetMass(arg0)
	return ToFloat64(retValue)
}
func (pself *physicMgr) AddForce(obj Object, force Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(force)
	CallPhysicAddForce(arg0, arg1)
}
func (pself *physicMgr) AddImpulse(obj Object, impulse Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(impulse)
	CallPhysicAddImpulse(arg0, arg1)
}
func (pself *physicMgr) SetCollisionLayer(obj Object, layer int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(layer)
	CallPhysicSetCollisionLayer(arg0, arg1)
}
func (pself *physicMgr) GetCollisionLayer(obj Object) int64  {
	arg0 := ToGdObj(obj)
	retValue := CallPhysicGetCollisionLayer(arg0)
	return ToInt64(retValue)
}
func (pself *physicMgr) SetCollisionMask(obj Object, mask int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(mask)
	CallPhysicSetCollisionMask(arg0, arg1)
}
func (pself *physicMgr) GetCollisionMask(obj Object) int64  {
	arg0 := ToGdObj(obj)
	retValue := CallPhysicGetCollisionMask(arg0)
	return ToInt64(retValue)
}
func (pself *physicMgr) GetColliderType(obj Object) int64  {
	arg0 := ToGdObj(obj)
	retValue := CallPhysicGetColliderType(arg0)
	return ToInt64(retValue)
}
func (pself *physicMgr) AddColliderRect(obj Object, center Vec2, size Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdVec2(size)
	CallPhysicAddColliderRect(arg0, arg1, arg2)
}
func (pself *physicMgr) AddColliderCircle(obj Object, center Vec2, radius float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdFloat(radius)
	CallPhysicAddColliderCircle(arg0, arg1, arg2)
}
func (pself *physicMgr) AddColliderCapsule(obj Object, center Vec2, size Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(center)
	arg2 := ToGdVec2(size)
	CallPhysicAddColliderCapsule(arg0, arg1, arg2)
}
func (pself *physicMgr) SetTrigger(obj Object, trigger bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(trigger)
	CallPhysicSetTrigger(arg0, arg1)
}
func (pself *physicMgr) IsTrigger(obj Object) bool  {
	arg0 := ToGdObj(obj)
	retValue := CallPhysicIsTrigger(arg0)
	return ToBool(retValue)
}
func (pself *physicMgr) SetCollisionEnabled(obj Object, enabled bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(enabled)
	CallPhysicSetCollisionEnabled(arg0, arg1)
}
func (pself *physicMgr) IsCollisionEnabled(obj Object) bool  {
	arg0 := ToGdObj(obj)
	retValue := CallPhysicIsCollisionEnabled(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) CreateSprite(path string) Object  {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	retValue := CallSpriteCreateSprite(arg0)
	return ToObject(retValue)
}
func (pself *spriteMgr) CloneSprite(obj Object) Object  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteCloneSprite(arg0)
	return ToObject(retValue)
}
func (pself *spriteMgr) DestroySprite(obj Object) bool  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteDestroySprite(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) IsSpriteAlive(obj Object) bool  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteIsSpriteAlive(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) SetPosition(obj Object, pos Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(pos)
	CallSpriteSetPosition(arg0, arg1)
}
func (pself *spriteMgr) SetRotation(obj Object, rot float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(rot)
	CallSpriteSetRotation(arg0, arg1)
}
func (pself *spriteMgr) SetScale(obj Object, scale Vec2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdVec2(scale)
	CallSpriteSetScale(arg0, arg1)
}
func (pself *spriteMgr) GetPosition(obj Object) Vec2  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetPosition(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) GetRotation(obj Object) float64  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetRotation(arg0)
	return ToFloat64(retValue)
}
func (pself *spriteMgr) GetScale(obj Object) Vec2  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetScale(arg0)
	return ToVec2(retValue)
}
func (pself *spriteMgr) SetColor(obj Object, color Color) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdColor(color)
	CallSpriteSetColor(arg0, arg1)
}
func (pself *spriteMgr) GetColor(obj Object) Color  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetColor(arg0)
	return ToColor(retValue)
}
func (pself *spriteMgr) UpdateTexture(obj Object, path string) {
	arg0 := ToGdObj(obj)
	arg1Str := NewCString(path)
	arg1 := arg1Str.ToGdString() 
	CallSpriteUpdateTexture(arg0, arg1)
}
func (pself *spriteMgr) GetTexture(obj Object) string  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetTexture(arg0)
	return ToString(retValue)
}
func (pself *spriteMgr) SetVisible(obj Object, visible bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(visible)
	CallSpriteSetVisible(arg0, arg1)
}
func (pself *spriteMgr) GetVisible(obj Object) bool  {
	arg0 := ToGdObj(obj)
	retValue := CallSpriteGetVisible(arg0)
	return ToBool(retValue)
}
func (pself *spriteMgr) UpdateZIndex(obj Object, z int64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdInt(z)
	CallSpriteUpdateZIndex(arg0, arg1)
}
func (pself *uiMgr) CreateButton(path string, rect Rect2, text string) int64  {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	arg1 := ToGdRect2(rect)
	arg2Str := NewCString(text)
	arg2 := arg2Str.ToGdString() 
	retValue := CallUICreateButton(arg0, arg1, arg2)
	return ToInt64(retValue)
}
func (pself *uiMgr) CreateLabel(path string, rect Rect2, text string) int64  {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	arg1 := ToGdRect2(rect)
	arg2Str := NewCString(text)
	arg2 := arg2Str.ToGdString() 
	retValue := CallUICreateLabel(arg0, arg1, arg2)
	return ToInt64(retValue)
}
func (pself *uiMgr) CreateImage(path string, rect Rect2, color Color) int64  {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	arg1 := ToGdRect2(rect)
	arg2 := ToGdColor(color)
	retValue := CallUICreateImage(arg0, arg1, arg2)
	return ToInt64(retValue)
}
func (pself *uiMgr) CreateSlider(path string, rect Rect2, value float64) int64  {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	arg1 := ToGdRect2(rect)
	arg2 := ToGdFloat(value)
	retValue := CallUICreateSlider(arg0, arg1, arg2)
	return ToInt64(retValue)
}
func (pself *uiMgr) CreateToggle(path string, rect Rect2, value bool) int64  {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	arg1 := ToGdRect2(rect)
	arg2 := ToGdBool(value)
	retValue := CallUICreateToggle(arg0, arg1, arg2)
	return ToInt64(retValue)
}
func (pself *uiMgr) CreateInput(path string, rect Rect2, text string) int64  {
	arg0Str := NewCString(path)
	arg0 := arg0Str.ToGdString() 
	arg1 := ToGdRect2(rect)
	arg2Str := NewCString(text)
	arg2 := arg2Str.ToGdString() 
	retValue := CallUICreateInput(arg0, arg1, arg2)
	return ToInt64(retValue)
}
func (pself *uiMgr) GetType(obj Object) int64  {
	arg0 := ToGdObj(obj)
	retValue := CallUIGetType(arg0)
	return ToInt64(retValue)
}
func (pself *uiMgr) SetInteractable(obj Object, interactable bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(interactable)
	CallUISetInteractable(arg0, arg1)
}
func (pself *uiMgr) GetInteractable(obj Object) bool  {
	arg0 := ToGdObj(obj)
	retValue := CallUIGetInteractable(arg0)
	return ToBool(retValue)
}
func (pself *uiMgr) SetText(obj Object, text string) {
	arg0 := ToGdObj(obj)
	arg1Str := NewCString(text)
	arg1 := arg1Str.ToGdString() 
	CallUISetText(arg0, arg1)
}
func (pself *uiMgr) GetText(obj Object) string  {
	arg0 := ToGdObj(obj)
	retValue := CallUIGetText(arg0)
	return ToString(retValue)
}
func (pself *uiMgr) SetRect(obj Object, rect Rect2) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdRect2(rect)
	CallUISetRect(arg0, arg1)
}
func (pself *uiMgr) GetRect(obj Object) Rect2  {
	arg0 := ToGdObj(obj)
	retValue := CallUIGetRect(arg0)
	return ToRect2(retValue)
}
func (pself *uiMgr) SetColor(obj Object, color Color) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdColor(color)
	CallUISetColor(arg0, arg1)
}
func (pself *uiMgr) GetColor(obj Object) Color  {
	arg0 := ToGdObj(obj)
	retValue := CallUIGetColor(arg0)
	return ToColor(retValue)
}
func (pself *uiMgr) SetFontSize(obj Object, size float64) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdFloat(size)
	CallUISetFontSize(arg0, arg1)
}
func (pself *uiMgr) GetFontSize(obj Object) float64  {
	arg0 := ToGdObj(obj)
	retValue := CallUIGetFontSize(arg0)
	return ToFloat64(retValue)
}
func (pself *uiMgr) SetVisible(obj Object, visible bool) {
	arg0 := ToGdObj(obj)
	arg1 := ToGdBool(visible)
	CallUISetVisible(arg0, arg1)
}
func (pself *uiMgr) GetVisible(obj Object) bool  {
	arg0 := ToGdObj(obj)
	retValue := CallUIGetVisible(arg0)
	return ToBool(retValue)
}